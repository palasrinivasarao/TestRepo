///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ViewNewlyCreatedRecord recording.
    /// </summary>
    [TestModule("b89bb120-5b72-4d92-af56-6b63a6369aff", ModuleType.Recording, 1)]
    public partial class ViewNewlyCreatedRecord : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static ViewNewlyCreatedRecord instance = new ViewNewlyCreatedRecord();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ViewNewlyCreatedRecord()
        {
            NewlyCreatedRecordID = "";
            NewRefNumAssignedinRecord = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ViewNewlyCreatedRecord Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewlyCreatedRecordID;

        /// <summary>
        /// Gets or sets the value of variable NewlyCreatedRecordID.
        /// </summary>
        [TestVariable("ae12d13e-3a3e-4d7f-8917-992d1885bd68")]
        public string NewlyCreatedRecordID
        {
            get { return _NewlyCreatedRecordID; }
            set { _NewlyCreatedRecordID = value; }
        }

        string _NewRefNumAssignedinRecord;

        /// <summary>
        /// Gets or sets the value of variable NewRefNumAssignedinRecord.
        /// </summary>
        [TestVariable("b32502fa-ea17-4b6b-af3a-bd050c693347")]
        public string NewRefNumAssignedinRecord
        {
            get { return _NewRefNumAssignedinRecord; }
            set { _NewRefNumAssignedinRecord = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(0));
            Delay.Duration(2000, false);
            
            // Fetching Newly Created Record ID
            Report.Log(ReportLevel.Info, "Get Value", "Fetching Newly Created Record ID\r\nGetting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.TdRecordIDNew' and assigning its value to variable 'NewlyCreatedRecordID'.", repo.ApplicationUnderTest.LogsScreen.TdRecordIDNewInfo, new RecordItemIndex(1));
            NewlyCreatedRecordID = repo.ApplicationUnderTest.LogsScreen.TdRecordIDNew.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", NewlyCreatedRecordID, new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(3));
            Delay.Duration(4000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconViewForm' at Center.", repo.ApplicationUnderTest.HomePage.IconViewFormInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.HomePage.IconViewForm.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'TxtAutoGenReferenceNum' and assigning its value to variable 'NewRefNumAssignedinRecord'.", repo.TxtAutoGenReferenceNumInfo, new RecordItemIndex(6));
            NewRefNumAssignedinRecord = repo.TxtAutoGenReferenceNum.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", NewRefNumAssignedinRecord, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.BtnLog' at Center.", repo.ApplicationUnderTest.LogsScreen.BtnLogInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.LogsScreen.BtnLog.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(9));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
