///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SortByApplicantAddress recording.
    /// </summary>
    [TestModule("6b1e45bc-4fdb-4073-8667-4cebcc56398f", ModuleType.Recording, 1)]
    public partial class SortByApplicantAddress : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static SortByApplicantAddress instance = new SortByApplicantAddress();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SortByApplicantAddress()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SortByApplicantAddress Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable DateEnteredView.
        /// </summary>
        [TestVariable("03d8d640-dfb0-4121-8c34-f290b498ff34")]
        public string DateEnteredView
        {
            get { return repo.DateEnteredView; }
            set { repo.DateEnteredView = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddressInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddressInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress' at Center.", repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddressInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=20,Height=20}) on item 'ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo, new RecordItemIndex(4));
            Validate.ContainsImage(repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo, SortingArrowAcendApplicantAddress_Screenshot1, SortingArrowAcendApplicantAddress_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.LinkViewNameCreated' at Center.", repo.ApplicationUnderTest.HomePage.LinkViewNameCreatedInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.HomePage.LinkViewNameCreated.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(7));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddressInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddressInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnApplicantAddress.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=20,Height=20}) on item 'ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddress'.", repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo, new RecordItemIndex(10));
            Validate.ContainsImage(repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo, SortingArrowAcendApplicantAddress_Screenshot1_2, SortingArrowAcendApplicantAddress_Screenshot1_2_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage SortingArrowAcendApplicantAddress_Screenshot1
        { get { return repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo.GetScreenshot1(new Rectangle(0, 0, 20, 20)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions SortingArrowAcendApplicantAddress_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage SortingArrowAcendApplicantAddress_Screenshot1_2
        { get { return repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAcendApplicantAddressInfo.GetScreenshot1(new Rectangle(0, 0, 20, 20)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions SortingArrowAcendApplicantAddress_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
