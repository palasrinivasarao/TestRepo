///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SortByStatus recording.
    /// </summary>
    [TestModule("9a523cb5-a8b8-4480-83ab-b253d0e20b6d", ModuleType.Recording, 1)]
    public partial class SortByStatus : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static SortByStatus instance = new SortByStatus();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SortByStatus()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SortByStatus Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable DateEnteredView.
        /// </summary>
        [TestVariable("03d8d640-dfb0-4121-8c34-f290b498ff34")]
        public string DateEnteredView
        {
            get { return repo.DateEnteredView; }
            set { repo.DateEnteredView = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.ColumnStatus' at Center.", repo.ApplicationUnderTest.DataViewerGrid.ColumnStatusInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.DataViewerGrid.ColumnStatus.Click();
            Delay.Milliseconds(0);
            
            // Validating that the first cell in the Status column diplays status as New
            Report.Log(ReportLevel.Info, "Validation", "Validating that the first cell in the Status column diplays status as New\r\nValidating AttributeContains (Title>'New') on item 'ApplicationUnderTest.DataViewerGrid.StatusFirstCell'.", repo.ApplicationUnderTest.DataViewerGrid.StatusFirstCellInfo, new RecordItemIndex(1));
            Validate.AttributeContains(repo.ApplicationUnderTest.DataViewerGrid.StatusFirstCellInfo, "Title", "New");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(2));
            Delay.Duration(2000, false);
            
            // Validating that sort order selected is ascending order sort on column Status
            Report.Log(ReportLevel.Info, "Validation", "Validating that sort order selected is ascending order sort on column Status\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=20,Height=20}) on item 'ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatus'.", repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo, new RecordItemIndex(3));
            Validate.ContainsImage(repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo, SortingArrowAscendingStatus_Screenshot1, SortingArrowAscendingStatus_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.AllView' at Center.", repo.ApplicationUnderTest.DataViewerGrid.AllViewInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.DataViewerGrid.AllView.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.LinkViewNameCreated' at Center.", repo.ApplicationUnderTest.HomePage.LinkViewNameCreatedInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.HomePage.LinkViewNameCreated.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(6));
            Delay.Duration(2000, false);
            
            // Validating that sort order as ascending on Status is retained after going away and revisiting the view again
            Report.Log(ReportLevel.Info, "Validation", "Validating that sort order as ascending on Status is retained after going away and revisiting the view again\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=20,Height=20}) on item 'ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatus'.", repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo, new RecordItemIndex(7));
            Validate.ContainsImage(repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo, SortingArrowAscendingStatus_Screenshot1_2, SortingArrowAscendingStatus_Screenshot1_2_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage SortingArrowAscendingStatus_Screenshot1
        { get { return repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo.GetScreenshot1(new Rectangle(0, 0, 20, 20)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions SortingArrowAscendingStatus_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage SortingArrowAscendingStatus_Screenshot1_2
        { get { return repo.ApplicationUnderTest.DataViewerGrid.SortingArrowAscendingStatusInfo.GetScreenshot1(new Rectangle(0, 0, 20, 20)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions SortingArrowAscendingStatus_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
