///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The FillFormDetails recording.
    /// </summary>
    [TestModule("58fe7fdf-a5f5-4815-a94f-91c3f95d046b", ModuleType.Recording, 1)]
    public partial class FillFormDetails : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static FillFormDetails instance = new FillFormDetails();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public FillFormDetails()
        {
            SecondName = "yourtext";
            FirstName = "";
            PhoneNumber = "";
            Address2 = "yourtext";
            DogName = "yourtext";
            BreedInput = "yourtext";
            EmailAddress = "yourtext";
            NewBreed = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static FillFormDetails Instance
        {
            get { return instance; }
        }

#region Variables

        string _SecondName;

        /// <summary>
        /// Gets or sets the value of variable SecondName.
        /// </summary>
        [TestVariable("a4d26f5c-9c94-408a-88c6-0913521fe7cc")]
        public string SecondName
        {
            get { return _SecondName; }
            set { _SecondName = value; }
        }

        string _FirstName;

        /// <summary>
        /// Gets or sets the value of variable FirstName.
        /// </summary>
        [TestVariable("a591ef01-cb3c-4db2-bb29-69ad41ac67b6")]
        public string FirstName
        {
            get { return _FirstName; }
            set { _FirstName = value; }
        }

        string _PhoneNumber;

        /// <summary>
        /// Gets or sets the value of variable PhoneNumber.
        /// </summary>
        [TestVariable("bb7792a4-5e2a-4ea4-8a8d-585d930b8e8f")]
        public string PhoneNumber
        {
            get { return _PhoneNumber; }
            set { _PhoneNumber = value; }
        }

        string _Address2;

        /// <summary>
        /// Gets or sets the value of variable Address2.
        /// </summary>
        [TestVariable("975ee1a8-3b07-4f1d-a30f-f8a1937a7483")]
        public string Address2
        {
            get { return _Address2; }
            set { _Address2 = value; }
        }

        string _DogName;

        /// <summary>
        /// Gets or sets the value of variable DogName.
        /// </summary>
        [TestVariable("e58f086e-5a87-46ba-b717-a9c5bcdb72f0")]
        public string DogName
        {
            get { return _DogName; }
            set { _DogName = value; }
        }

        string _BreedInput;

        /// <summary>
        /// Gets or sets the value of variable BreedInput.
        /// </summary>
        [TestVariable("aa10e551-a860-44cd-98df-d0f0398df0f4")]
        public string BreedInput
        {
            get { return _BreedInput; }
            set { _BreedInput = value; }
        }

        string _EmailAddress;

        /// <summary>
        /// Gets or sets the value of variable EmailAddress.
        /// </summary>
        [TestVariable("ea59a7f9-27d5-48e3-9557-1c00855c2a03")]
        public string EmailAddress
        {
            get { return _EmailAddress; }
            set { _EmailAddress = value; }
        }

        string _NewBreed;

        /// <summary>
        /// Gets or sets the value of variable NewBreed.
        /// </summary>
        [TestVariable("4e86ca19-94c9-49fd-ba5b-75623dddb71a")]
        public string NewBreed
        {
            get { return _NewBreed; }
            set { _NewBreed = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.CreateNewScreen.TxtFirstName'", repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtFirstName' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.CreateNewScreen.TxtFirstName.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtFirstName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, new RecordItemIndex(2));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtFirstName);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$FirstName' with focus on 'ApplicationUnderTest.CreateNewScreen.TxtFirstName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.CreateNewScreen.TxtFirstName.PressKeys(FirstName);
            Delay.Milliseconds(0);
            
            // Verifying Save Button Gets Enabled After Entering Data Into One Of The Fileds
            Report.Log(ReportLevel.Info, "Validation", "Verifying Save Button Gets Enabled After Entering Data Into One Of The Fileds\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.CreateNewScreen.BtnSave'.", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtSecondName' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtSecondNameInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.CreateNewScreen.TxtSecondName.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtSecondName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtSecondNameInfo, new RecordItemIndex(6));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtSecondName);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$SecondName' with focus on 'ApplicationUnderTest.CreateNewScreen.TxtSecondName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtSecondNameInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.CreateNewScreen.TxtSecondName.PressKeys(SecondName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNumInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum'.", repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNumInfo, new RecordItemIndex(9));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PhoneNumber' with focus on 'ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum'.", repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNumInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum.PressKeys(PhoneNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtEmail' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtEmailInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.CreateNewScreen.TxtEmail.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtEmail'.", repo.ApplicationUnderTest.CreateNewScreen.TxtEmailInfo, new RecordItemIndex(12));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtEmail);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EmailAddress' with focus on 'ApplicationUnderTest.CreateNewScreen.TxtEmail'.", repo.ApplicationUnderTest.CreateNewScreen.TxtEmailInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.CreateNewScreen.TxtEmail.PressKeys(EmailAddress);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtAddress2' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2Info, new RecordItemIndex(14));
            repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtAddress2'.", repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2Info, new RecordItemIndex(15));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Address2' with focus on 'ApplicationUnderTest.CreateNewScreen.TxtAddress2'.", repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2Info, new RecordItemIndex(16));
            repo.ApplicationUnderTest.CreateNewScreen.TxtAddress2.PressKeys(Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.Txt_DogName' at Center.", repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.CreateNewScreen.Txt_DogName.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.Txt_DogName'.", repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, new RecordItemIndex(18));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.Txt_DogName);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DogName' with focus on 'ApplicationUnderTest.CreateNewScreen.Txt_DogName'.", repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.CreateNewScreen.Txt_DogName.PressKeys(DogName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.TxtBreedInput' at Center.", repo.ApplicationUnderTest.CreateNewScreen.TxtBreedInputInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.CreateNewScreen.TxtBreedInput.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.CreateNewScreen.TxtBreedInput'.", repo.ApplicationUnderTest.CreateNewScreen.TxtBreedInputInfo, new RecordItemIndex(21));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.CreateNewScreen.TxtBreedInput);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(22));
            Delay.Duration(300, false);
            
            Key_sequence_TxtBreedInput(repo.ApplicationUnderTest.CreateNewScreen.TxtBreedInputInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Enter}'.", new RecordItemIndex(24));
            Keyboard.Press("{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.CreateNewScreen.BtnSaveAndClose'", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveAndCloseInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.CreateNewScreen.BtnSaveAndCloseInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.BtnSaveAndClose' at Center.", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveAndCloseInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.CreateNewScreen.BtnSaveAndClose.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(27));
            Delay.Duration(3000, false);
            
            // Verifying that edit form screen does not exist after Saving and Closing it
            //Report.Log(ReportLevel.Info, "Validation", "Verifying that edit form screen does not exist after Saving and Closing it\r\nValidating NotExists on item 'ApplicationUnderTest.HomePage.TabDisplayingAddress'.", repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo, new RecordItemIndex(28));
            //Validate.NotExists(repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo);
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
