///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyApplicationDateMatchesSysDateTime recording.
    /// </summary>
    [TestModule("65d13282-4559-4844-bbc0-1b92e5c8d8e6", ModuleType.Recording, 1)]
    public partial class VerifyApplicationDateMatchesSysDateTime : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyApplicationDateMatchesSysDateTime instance = new VerifyApplicationDateMatchesSysDateTime();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyApplicationDateMatchesSysDateTime()
        {
            GridDateEntered = "";
            RecID = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyApplicationDateMatchesSysDateTime Instance
        {
            get { return instance; }
        }

#region Variables

        string _GridDateEntered;

        /// <summary>
        /// Gets or sets the value of variable GridDateEntered.
        /// </summary>
        [TestVariable("2fecc04f-2968-4c84-ba89-c6c920101a75")]
        public string GridDateEntered
        {
            get { return _GridDateEntered; }
            set { _GridDateEntered = value; }
        }

        string _RecID;

        /// <summary>
        /// Gets or sets the value of variable RecID.
        /// </summary>
        [TestVariable("62e78b04-78b6-4a34-a2b3-19a1d1cda0c4")]
        public string RecID
        {
            get { return _RecID; }
            set { _RecID = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(0));
            Delay.Duration(2000, false);
            
            // Verifying if the Date Entered for the Created Record matches the system Date
            Get_value_DateEntered(repo.ApplicationUnderTest.DataViewerGrid.DateEnteredInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", GridDateEntered, new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
            // Fetching the newly created Recod ID for further comparison on the Log Screen
            Report.Log(ReportLevel.Info, "Get Value", "Fetching the newly created Recod ID for further comparison on the Log Screen\r\nGetting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.TdRecordIDNew' and assigning its value to variable 'RecID'.", repo.ApplicationUnderTest.LogsScreen.TdRecordIDNewInfo, new RecordItemIndex(4));
            RecID = repo.ApplicationUnderTest.LogsScreen.TdRecordIDNew.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", RecID, new RecordItemIndex(5));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
