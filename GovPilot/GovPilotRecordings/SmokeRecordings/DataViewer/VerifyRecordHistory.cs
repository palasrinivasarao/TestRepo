///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyRecordHistory recording.
    /// </summary>
    [TestModule("27d537e6-b23c-437c-aa99-1969bbe4e2db", ModuleType.Recording, 1)]
    public partial class VerifyRecordHistory : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyRecordHistory instance = new VerifyRecordHistory();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyRecordHistory()
        {
            RecordIdentifierInLog = "";
            CompareRecordIDWithGrid = "";
            LogEmail = "";
            LogEmailVerify = "";
            FirstnameInLogs = "yourValue";
            LastNameInLogs = "yourValue";
            PhoneInLogs = "yourValue";
            Address2InLogs = "yourValue";
            BreedInLogs = "yourValue";
            PetNameInLogs = "yourValue";
            FormatedPhone = "";
            RefNoInLogs = "yourValue";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyRecordHistory Instance
        {
            get { return instance; }
        }

#region Variables

        string _RecordIdentifierInLog;

        /// <summary>
        /// Gets or sets the value of variable RecordIdentifierInLog.
        /// </summary>
        [TestVariable("304103a0-bd1a-4654-9c90-1e524c5631eb")]
        public string RecordIdentifierInLog
        {
            get { return _RecordIdentifierInLog; }
            set { _RecordIdentifierInLog = value; }
        }

        string _CompareRecordIDWithGrid;

        /// <summary>
        /// Gets or sets the value of variable CompareRecordIDWithGrid.
        /// </summary>
        [TestVariable("b2b103a8-4b4a-4d85-9965-ae86b8e7a615")]
        public string CompareRecordIDWithGrid
        {
            get { return _CompareRecordIDWithGrid; }
            set { _CompareRecordIDWithGrid = value; }
        }

        string _LogEmail;

        /// <summary>
        /// Gets or sets the value of variable LogEmail.
        /// </summary>
        [TestVariable("9c50cd65-0238-4352-a7c0-48b0aeb2dc52")]
        public string LogEmail
        {
            get { return _LogEmail; }
            set { _LogEmail = value; }
        }

        string _LogEmailVerify;

        /// <summary>
        /// Gets or sets the value of variable LogEmailVerify.
        /// </summary>
        [TestVariable("a84e20d8-a81e-45f7-b2a5-154f3d312e16")]
        public string LogEmailVerify
        {
            get { return _LogEmailVerify; }
            set { _LogEmailVerify = value; }
        }

        string _FirstnameInLogs;

        /// <summary>
        /// Gets or sets the value of variable FirstnameInLogs.
        /// </summary>
        [TestVariable("6163b8ae-bc6d-4b9e-8793-786710d6da4e")]
        public string FirstnameInLogs
        {
            get { return _FirstnameInLogs; }
            set { _FirstnameInLogs = value; }
        }

        string _LastNameInLogs;

        /// <summary>
        /// Gets or sets the value of variable LastNameInLogs.
        /// </summary>
        [TestVariable("5e5caac4-06fa-40cd-ad02-2d6f8b6dc631")]
        public string LastNameInLogs
        {
            get { return _LastNameInLogs; }
            set { _LastNameInLogs = value; }
        }

        string _PhoneInLogs;

        /// <summary>
        /// Gets or sets the value of variable PhoneInLogs.
        /// </summary>
        [TestVariable("833ff4fc-423d-40e4-8c5f-8385d9f9d4c3")]
        public string PhoneInLogs
        {
            get { return _PhoneInLogs; }
            set { _PhoneInLogs = value; }
        }

        string _Address2InLogs;

        /// <summary>
        /// Gets or sets the value of variable Address2InLogs.
        /// </summary>
        [TestVariable("1fc00b65-1ec4-4fbf-9295-6324b1cd9720")]
        public string Address2InLogs
        {
            get { return _Address2InLogs; }
            set { _Address2InLogs = value; }
        }

        string _BreedInLogs;

        /// <summary>
        /// Gets or sets the value of variable BreedInLogs.
        /// </summary>
        [TestVariable("ebc3e991-45b2-4b6f-ad44-22453c0e37c4")]
        public string BreedInLogs
        {
            get { return _BreedInLogs; }
            set { _BreedInLogs = value; }
        }

        string _PetNameInLogs;

        /// <summary>
        /// Gets or sets the value of variable PetNameInLogs.
        /// </summary>
        [TestVariable("151d22bb-9a9b-4396-aeca-bd4e6951460e")]
        public string PetNameInLogs
        {
            get { return _PetNameInLogs; }
            set { _PetNameInLogs = value; }
        }

        string _FormatedPhone;

        /// <summary>
        /// Gets or sets the value of variable FormatedPhone.
        /// </summary>
        [TestVariable("221fcb37-c071-4543-9a62-5466827d89ff")]
        public string FormatedPhone
        {
            get { return _FormatedPhone; }
            set { _FormatedPhone = value; }
        }

        string _RefNoInLogs;

        /// <summary>
        /// Gets or sets the value of variable RefNoInLogs.
        /// </summary>
        [TestVariable("f4c0f4be-0ace-4eb9-a45d-96e592b9f783")]
        public string RefNoInLogs
        {
            get { return _RefNoInLogs; }
            set { _RefNoInLogs = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconViewForm' at Center.", repo.ApplicationUnderTest.HomePage.IconViewFormInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.IconViewForm.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.BtnLog' at Center.", repo.ApplicationUnderTest.LogsScreen.BtnLogInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.LogsScreen.BtnLog.Click();
            Delay.Milliseconds(0);
            
            // Verifying that Log window is open
            Report.Log(ReportLevel.Info, "Validation", "Verifying that Log window is open\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.LogsScreen.WindowLog'.", repo.ApplicationUnderTest.LogsScreen.WindowLogInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LogsScreen.WindowLogInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            // Fetching the Record ID from Log Screen
            Report.Log(ReportLevel.Info, "Get Value", "Fetching the Record ID from Log Screen\r\nGetting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.RecordIDInLog' and assigning its value to variable 'RecordIdentifierInLog'.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(3));
            RecordIdentifierInLog = repo.ApplicationUnderTest.LogsScreen.RecordIDInLog.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", RecordIdentifierInLog, new RecordItemIndex(4));
            
            // Validating that Record ID in Logs matches with the Record ID on the grid before viewing the record
            Report.Log(ReportLevel.Info, "Validation", "Validating that Record ID in Logs matches with the Record ID on the grid before viewing the record\r\nValidating AttributeContains (InnerText>$CompareRecordIDWithGrid) on item 'ApplicationUnderTest.LogsScreen.RecordIDInLog'.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(5));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, "InnerText", CompareRecordIDWithGrid);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.RecordIDInLog' at Center.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.LogsScreen.RecordIDInLog.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.LogsEmailID' and assigning its value to variable 'LogEmail'.", repo.ApplicationUnderTest.LogsScreen.LogsEmailIDInfo, new RecordItemIndex(7));
            LogEmail = repo.ApplicationUnderTest.LogsScreen.LogsEmailID.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", LogEmail, new RecordItemIndex(8));
            
            // Validating that email displayed in Log screen under channged information section matches with the email entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that email displayed in Log screen under channged information section matches with the email entered on the form page\r\nValidating AttributeContains (InnerText>$LogEmailVerify) on item 'ApplicationUnderTest.LogsScreen.LogsEmailID'.", repo.ApplicationUnderTest.LogsScreen.LogsEmailIDInfo, new RecordItemIndex(9));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.LogsEmailIDInfo, "InnerText", LogEmailVerify);
            Delay.Milliseconds(0);
            
            // Validating that FirstName displayed in Log screen under channged information section matches with the FirstName entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that FirstName displayed in Log screen under channged information section matches with the FirstName entered on the form page\r\nValidating AttributeContains (InnerText>$FirstnameInLogs) on item 'ApplicationUnderTest.LogsScreen.TDFirstNameInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDFirstNameInLogsInfo, new RecordItemIndex(10));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDFirstNameInLogsInfo, "InnerText", FirstnameInLogs);
            Delay.Milliseconds(0);
            
            // Validating that LastName displayed in Log screen under channged information section matches with the LastName entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that LastName displayed in Log screen under channged information section matches with the LastName entered on the form page\r\nValidating AttributeContains (InnerText>$LastNameInLogs) on item 'ApplicationUnderTest.LogsScreen.TDLasttNameInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDLasttNameInLogsInfo, new RecordItemIndex(11));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDLasttNameInLogsInfo, "InnerText", LastNameInLogs);
            Delay.Milliseconds(0);
            
            // Validating that Phone displayed in Log screen under channged information section matches with the Phone entered on the form page
            //Report.Log(ReportLevel.Info, "Validation", "Validating that Phone displayed in Log screen under channged information section matches with the Phone entered on the form page\r\nValidating AttributeContains (InnerText>$PhoneInLogs) on item 'ApplicationUnderTest.LogsScreen.TDPhoneInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDPhoneInLogsInfo, new RecordItemIndex(12));
            //Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDPhoneInLogsInfo, "InnerText", PhoneInLogs);
            //Delay.Milliseconds(0);
            
            // Validating that Address2 displayed in Log screen under channged information section matches with the Address2 entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that Address2 displayed in Log screen under channged information section matches with the Address2 entered on the form page\r\nValidating AttributeContains (InnerText>$Address2InLogs) on item 'ApplicationUnderTest.LogsScreen.TDAddress2InLogs'.", repo.ApplicationUnderTest.LogsScreen.TDAddress2InLogsInfo, new RecordItemIndex(13));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDAddress2InLogsInfo, "InnerText", Address2InLogs);
            Delay.Milliseconds(0);
            
            // Validating that Breed displayed in Log screen under channged information section matches with the Breed entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that Breed displayed in Log screen under channged information section matches with the Breed entered on the form page\r\nValidating AttributeContains (InnerText>$BreedInLogs) on item 'ApplicationUnderTest.LogsScreen.TDBreedInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDBreedInLogsInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDBreedInLogsInfo, "InnerText", BreedInLogs);
            Delay.Milliseconds(0);
            
            // Validating that Pet Name displayed in Log screen under channged information section matches with the Pet Name entered on the form page
            Report.Log(ReportLevel.Info, "Validation", "Validating that Pet Name displayed in Log screen under channged information section matches with the Pet Name entered on the form page\r\nValidating AttributeContains (InnerText>$PetNameInLogs) on item 'ApplicationUnderTest.LogsScreen.TDPetNameInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDPetNameInLogsInfo, new RecordItemIndex(15));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDPetNameInLogsInfo, "InnerText", PetNameInLogs);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$RefNoInLogs) on item 'ApplicationUnderTest.LogsScreen.TDRefNoInLogs'.", repo.ApplicationUnderTest.LogsScreen.TDRefNoInLogsInfo, new RecordItemIndex(16));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.LogsScreen.TDRefNoInLogsInfo, "InnerText", RefNoInLogs);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.IconCloseLog' at Center.", repo.ApplicationUnderTest.LogsScreen.IconCloseLogInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.LogsScreen.IconCloseLog.Click();
            Delay.Milliseconds(0);
            
            // Validating Form screen displays by verifying the display of Application Date field which displays on the Form Screen
            Report.Log(ReportLevel.Info, "Validation", "Validating Form screen displays by verifying the display of Application Date field which displays on the Form Screen\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.ViewFormPage.TxtDateEnteredField'.", repo.ApplicationUnderTest.ViewFormPage.TxtDateEnteredFieldInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ViewFormPage.TxtDateEnteredFieldInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconCloseRecord' at Center.", repo.ApplicationUnderTest.HomePage.IconCloseRecordInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.HomePage.IconCloseRecord.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
