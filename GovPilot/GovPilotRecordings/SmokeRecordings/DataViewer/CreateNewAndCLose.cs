///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateNewAndCLose recording.
    /// </summary>
    [TestModule("124b484e-5f52-4f51-be2f-8e81cfcc1e80", ModuleType.Recording, 1)]
    public partial class CreateNewAndCLose : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CreateNewAndCLose instance = new CreateNewAndCLose();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateNewAndCLose()
        {
            PropAddress = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateNewAndCLose Instance
        {
            get { return instance; }
        }

#region Variables

        string _PropAddress;

        /// <summary>
        /// Gets or sets the value of variable PropAddress.
        /// </summary>
        [TestVariable("c1d870e6-f5a6-4251-9d68-c3ae0fae94ec")]
        public string PropAddress
        {
            get { return _PropAddress; }
            set { _PropAddress = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(0));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnCreateNew' at Center.", repo.ApplicationUnderTest.HomePage.BtnCreateNewInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.BtnCreateNew.Click();
            Delay.Milliseconds(0);
            
            // Validating if PropertyFinder modal displays
            Report.Log(ReportLevel.Info, "Validation", "Validating if PropertyFinder modal displays\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.TitlePropertyFinder'.", repo.ApplicationUnderTest.HomePage.TitlePropertyFinderInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.TitlePropertyFinderInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.PropSearchVal' at Center.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PropAddress' with focus on 'ApplicationUnderTest.HomePage.PropSearchVal'.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.PressKeys(PropAddress);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Enter}' with focus on 'ApplicationUnderTest.HomePage.PropSearchVal'.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.PressKeys("{Down}{Enter}");
            Delay.Milliseconds(0);
            
            // Validating if the Same Address opened up
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Same Address opened up\r\nValidating AttributeContains (InnerText>$PropAddress) on item 'ApplicationUnderTest.HomePage.TabDisplayingAddress'.", repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo, "InnerText", PropAddress);
            Delay.Milliseconds(0);
            
            // Validating That Form displays the address that was opened up
            Report.Log(ReportLevel.Info, "Validation", "Validating That Form displays the address that was opened up\r\nValidating AttributeContains (TagValue>$PropAddress) on item 'ApplicationUnderTest.HomePage.AddressFieldOnForm'.", repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, "TagValue", PropAddress);
            Delay.Milliseconds(0);
            
            // Validatting That FirstName Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That FirstName Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.TxtFirstName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, new RecordItemIndex(9));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.TxtFirstNameInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            // Validatting That LastName Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That LastName Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.TxtSecondName'.", repo.ApplicationUnderTest.CreateNewScreen.TxtSecondNameInfo, new RecordItemIndex(10));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.TxtSecondNameInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            // Validatting That  Phone Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That  Phone Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNum'.", repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNumInfo, new RecordItemIndex(11));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.TxtOwnerPhoneNumInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            // Validatting That Email Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That Email Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.TxtEmail'.", repo.ApplicationUnderTest.CreateNewScreen.TxtEmailInfo, new RecordItemIndex(12));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.TxtEmailInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            // Validatting That PetName Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That PetName Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.Txt_DogName'.", repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, new RecordItemIndex(13));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            // Validatting That Breed Input Field is Empty
            Report.Log(ReportLevel.Info, "Validation", "Validatting That Breed Input Field is Empty\r\nValidating AttributeContains (InnerText>'') on item 'ApplicationUnderTest.CreateNewScreen.Txt_DogName'.", repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.ApplicationUnderTest.CreateNewScreen.Txt_DogNameInfo, "InnerText", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnCLose' at Center.", repo.ApplicationUnderTest.HomePage.BtnCLoseInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.HomePage.BtnCLose.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(16));
            Delay.Duration(2000, false);
            
            // Validating if control went back to Create New screen
            Report.Log(ReportLevel.Info, "Validation", "Validating if control went back to Create New screen\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.BtnCreateNew'.", repo.ApplicationUnderTest.HomePage.BtnCreateNewInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.BtnCreateNewInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
