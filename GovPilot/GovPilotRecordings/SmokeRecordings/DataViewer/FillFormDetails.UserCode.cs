///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
    public partial class FillFormDetails
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Key_sequence_TxtBreedInput(RepoItemInfo inputtagInfo)
        {
            
        	
        	string[] values = { "Akita", "Akita Mix", "Affenpinscher", "Afghan Hound", "Airedale Terrier", "Australian Sheep Dog", "American Bull Dog",
        	"American Eskimo", "American Eskimo Mix", "American Pit Bull", "Alaskan Malamute", "Alaskan Huskie", "American Pit Bull Terrier", "Dachshund", "Basador", "Basenji",
        	 "Basset Hound", "Hovawart", "Papillon", "Otter Hound", "Old English Sheepdog", "Petr Husky"};
        
        Random random = new Random();
        
        // Define the number of unique values you want to pick
        int numberOfValuesToPick = 1;

        // Ensure we don't try to pick more values than are available
        if (numberOfValuesToPick > values.Length)
        {
            numberOfValuesToPick = values.Length;
        }
        
        // Array to hold the picked values
        string[] pickedValues = new string[numberOfValuesToPick];
        
        // List to keep track of picked indices
        bool[] pickedIndices = new bool[values.Length];
        
        // Loop to pick unique random values
        int count = 0;
        while (count < numberOfValuesToPick)
        {
            int randomIndex = random.Next(values.Length);
            if (!pickedIndices[randomIndex])
            {
                pickedValues[count] = values[randomIndex];
                pickedIndices[randomIndex] = true;
                count++;
            }
        }
		foreach (var Breed in pickedValues)
        NewBreed = Breed;
        	        	
        	Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewBreed' with focus on 'inputtagInfo'.", inputtagInfo);
            inputtagInfo.FindAdapter<InputTag>().PressKeys(NewBreed);
        }

    }
}
