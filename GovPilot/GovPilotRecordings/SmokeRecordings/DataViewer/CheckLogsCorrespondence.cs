///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CheckLogsCorrespondence recording.
    /// </summary>
    [TestModule("fca61a99-2f40-4d80-a03d-d143d66d8ba7", ModuleType.Recording, 1)]
    public partial class CheckLogsCorrespondence : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CheckLogsCorrespondence instance = new CheckLogsCorrespondence();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CheckLogsCorrespondence()
        {
            EmailSentTo = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CheckLogsCorrespondence Instance
        {
            get { return instance; }
        }

#region Variables

        string _EmailSentTo;

        /// <summary>
        /// Gets or sets the value of variable EmailSentTo.
        /// </summary>
        [TestVariable("3c511c27-1a4f-4837-b271-8a39bc541ab4")]
        public string EmailSentTo
        {
            get { return _EmailSentTo; }
            set { _EmailSentTo = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.BtnLog' at Center.", repo.ApplicationUnderTest.LogsScreen.BtnLogInfo, new RecordItemIndex(0));
            //repo.ApplicationUnderTest.LogsScreen.BtnLog.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.LogsScreen.TabCorrespondence'", repo.ApplicationUnderTest.LogsScreen.TabCorrespondenceInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.LogsScreen.TabCorrespondenceInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.TabCorrespondence' at Center.", repo.ApplicationUnderTest.LogsScreen.TabCorrespondenceInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.LogsScreen.TabCorrespondence.Click();
            Delay.Milliseconds(0);
            
            // Validating the email address matches the email in the record to which the email was sent out to
            Report.Log(ReportLevel.Info, "Validation", "Validating the email address matches the email in the record to which the email was sent out to\r\nValidating AttributeContains (InnerText>$EmailSentTo) on item 'ApplicationUnderTest.LogsScreen.TDEmailInCorrespondence'.", repo.ApplicationUnderTest.LogsScreen.TDEmailInCorrespondenceInfo, new RecordItemIndex(3));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.TDEmailInCorrespondenceInfo, "InnerText", EmailSentTo);
            Delay.Milliseconds(0);
            
            // Validating that status of email should be Sent in Logs under Correspondence tab
            Report.Log(ReportLevel.Info, "Validation", "Validating that status of email should be Sent in Logs under Correspondence tab\r\nValidating AttributeContains (InnerText>'Sent') on item 'ApplicationUnderTest.LogsScreen.StatusInCorrespondence'.", repo.ApplicationUnderTest.LogsScreen.StatusInCorrespondenceInfo, new RecordItemIndex(4));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.StatusInCorrespondenceInfo, "InnerText", "Sent");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
