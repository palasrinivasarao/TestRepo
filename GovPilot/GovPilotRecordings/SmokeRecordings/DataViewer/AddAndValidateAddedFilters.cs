///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddAndValidateAddedFilters recording.
    /// </summary>
    [TestModule("3757e7d1-6395-4c58-9601-168a594b0d89", ModuleType.Recording, 1)]
    public partial class AddAndValidateAddedFilters : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static AddAndValidateAddedFilters instance = new AddAndValidateAddedFilters();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddAndValidateAddedFilters()
        {
            Number = "yourtext";
            StartingRecordIDAfterFilter = "101";
            Date = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddAndValidateAddedFilters Instance
        {
            get { return instance; }
        }

#region Variables

        string _Number;

        /// <summary>
        /// Gets or sets the value of variable Number.
        /// </summary>
        [TestVariable("4ca58bb9-b833-4a81-a4a5-2eb91addf282")]
        public string Number
        {
            get { return _Number; }
            set { _Number = value; }
        }

        string _StartingRecordIDAfterFilter;

        /// <summary>
        /// Gets or sets the value of variable StartingRecordIDAfterFilter.
        /// </summary>
        [TestVariable("48558665-728a-4226-ad76-f5f0fb2c13d9")]
        public string StartingRecordIDAfterFilter
        {
            get { return _StartingRecordIDAfterFilter; }
            set { _StartingRecordIDAfterFilter = value; }
        }

        string _Date;

        /// <summary>
        /// Gets or sets the value of variable Date.
        /// </summary>
        [TestVariable("19010f40-242d-4e7c-86e9-2b6b442c6b9b")]
        public string Date
        {
            get { return _Date; }
            set { _Date = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.BtnFIlters' at Center.", repo.ApplicationUnderTest.DataViewerGrid.BtnFIltersInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.DataViewerGrid.BtnFIlters.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.BtnAddFilter' at Center.", repo.ApplicationUnderTest.DataViewerGrid.BtnAddFilterInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.DataViewerGrid.BtnAddFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.DrpDwnFIlter' at Center.", repo.ApplicationUnderTest.DataViewerGrid.DrpDwnFIlterInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.DataViewerGrid.DrpDwnFIlter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Enter}'.", new RecordItemIndex(3));
            Keyboard.Press("{Down}{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.DrpDwnConditionalOp' at Center.", repo.ApplicationUnderTest.DataViewerGrid.DrpDwnConditionalOpInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.DataViewerGrid.DrpDwnConditionalOp.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down 2}{Enter}'.", new RecordItemIndex(5));
            Keyboard.Press("{Down 2}{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(6));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.InputNumber' at Center.", repo.ApplicationUnderTest.DataViewerGrid.InputNumberInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.DataViewerGrid.InputNumber.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Number' with focus on 'ApplicationUnderTest.DataViewerGrid.InputNumber'.", repo.ApplicationUnderTest.DataViewerGrid.InputNumberInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.DataViewerGrid.InputNumber.PressKeys(Number);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$StartingRecordIDAfterFilter) on item 'ApplicationUnderTest.DataViewerGrid.TDTopMostRecordID'.", repo.ApplicationUnderTest.DataViewerGrid.TDTopMostRecordIDInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DataViewerGrid.TDTopMostRecordIDInfo, "InnerText", StartingRecordIDAfterFilter);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SuppliClickObject' at Center.", repo.SuppliClickObjectInfo, new RecordItemIndex(10));
            repo.SuppliClickObject.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(11));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.BtnFIlters' at Center.", repo.ApplicationUnderTest.DataViewerGrid.BtnFIltersInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.DataViewerGrid.BtnFIlters.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.IconRemoveFilter' at Center.", repo.ApplicationUnderTest.DataViewerGrid.IconRemoveFilterInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.DataViewerGrid.IconRemoveFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.BtnAddFilter' at Center.", repo.ApplicationUnderTest.DataViewerGrid.BtnAddFilterInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.DataViewerGrid.BtnAddFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.DrpDwnFIlter' at Center.", repo.ApplicationUnderTest.DataViewerGrid.DrpDwnFIlterInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.DataViewerGrid.DrpDwnFIlter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down 4}{Enter}'.", new RecordItemIndex(16));
            Keyboard.Press("{Down 4}{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.InputDate' at .25;.25.", repo.ApplicationUnderTest.DataViewerGrid.InputDateInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.DataViewerGrid.InputDate.Click(".25;.25");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Date' with focus on 'ApplicationUnderTest.DataViewerGrid.InputDate'.", repo.ApplicationUnderTest.DataViewerGrid.InputDateInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.DataViewerGrid.InputDate.PressKeys(Date);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SuppliClickObject' at Center.", repo.SuppliClickObjectInfo, new RecordItemIndex(19));
            repo.SuppliClickObject.Click();
            Delay.Milliseconds(0);
            
            // Validating that the top most item in the Date Entered column contains the Date enterd in the filter
            Report.Log(ReportLevel.Info, "Validation", "Validating that the top most item in the Date Entered column contains the Date enterd in the filter\r\nValidating AttributeContains (InnerText>$Date) on item 'ApplicationUnderTest.DataViewerGrid.TDTopMostDateEntered'.", repo.ApplicationUnderTest.DataViewerGrid.TDTopMostDateEnteredInfo, new RecordItemIndex(20));
            Validate.AttributeContains(repo.ApplicationUnderTest.DataViewerGrid.TDTopMostDateEnteredInfo, "InnerText", Date);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
