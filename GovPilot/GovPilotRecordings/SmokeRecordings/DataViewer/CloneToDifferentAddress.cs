///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CloneToDifferentAddress recording.
    /// </summary>
    [TestModule("3dd82ebe-47c6-4820-82fe-140f4e9fb54d", ModuleType.Recording, 1)]
    public partial class CloneToDifferentAddress : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CloneToDifferentAddress instance = new CloneToDifferentAddress();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CloneToDifferentAddress()
        {
            AddressOnClone = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CloneToDifferentAddress Instance
        {
            get { return instance; }
        }

#region Variables

        string _AddressOnClone;

        /// <summary>
        /// Gets or sets the value of variable AddressOnClone.
        /// </summary>
        [TestVariable("b4148900-67a5-4b02-ace1-25cd0b0df622")]
        public string AddressOnClone
        {
            get { return _AddressOnClone; }
            set { _AddressOnClone = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(0));
            Delay.Duration(3000, false);
            
            // Validating that view screen has launched
            Report.Log(ReportLevel.Info, "Validation", "Validating that view screen has launched\r\nValidating AttributeEqual (Visible='True') on item 'TxtAutoGenReferenceNum'.", repo.TxtAutoGenReferenceNumInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.TxtAutoGenReferenceNumInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ViewFormPage.BtnClone' at Center.", repo.ApplicationUnderTest.ViewFormPage.BtnCloneInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.ViewFormPage.BtnClone.Click();
            Delay.Milliseconds(0);
            
            // Validating that  cloning wizard opens up
            Report.Log(ReportLevel.Info, "Validation", "Validating that  cloning wizard opens up\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.CloningWizard.TitleCloningWizard'.", repo.ApplicationUnderTest.CloningWizard.TitleCloningWizardInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CloningWizard.TitleCloningWizardInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(4));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CloningWizard.RadioDifferentAddress' at Center.", repo.ApplicationUnderTest.CloningWizard.RadioDifferentAddressInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.CloningWizard.RadioDifferentAddress.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(6));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnNext'.", repo.ApplicationUnderTest.CloningWizard.BtnNextInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.CloningWizard.BtnNext.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnClone' at Center.", repo.ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnCloneInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnClone.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AddressOnClone' with focus on 'ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnClone'.", repo.ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnCloneInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.CloningWizard.TxtPropertyFinderOnClone.PressKeys(AddressOnClone);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(10));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}'.", new RecordItemIndex(11));
            Keyboard.Press("{Down}");
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(12));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Enter}'.", new RecordItemIndex(13));
            Keyboard.Press("{Enter}");
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnNext'.", repo.ApplicationUnderTest.CloningWizard.BtnNextInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.CloningWizard.BtnNext.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnNext'.", repo.ApplicationUnderTest.CloningWizard.BtnNextInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.CloningWizard.BtnNext.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (InnerText>$AddressOnClone) on item 'ApplicationUnderTest.CloningWizard.StrongAddressSummary'.", repo.ApplicationUnderTest.CloningWizard.StrongAddressSummaryInfo, new RecordItemIndex(16));
            Validate.AttributeContains(repo.ApplicationUnderTest.CloningWizard.StrongAddressSummaryInfo, "InnerText", AddressOnClone);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnClone'.", repo.ApplicationUnderTest.CloningWizard.BtnCloneInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.CloningWizard.BtnClone.As<WebElement>().PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.CreateNewScreen.BtnSave'", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.BtnSave' at Center.", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.CreateNewScreen.BtnSave.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
