///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyLogRecordMatches recording.
    /// </summary>
    [TestModule("581a544b-82a0-433d-9980-440afe64e69e", ModuleType.Recording, 1)]
    public partial class VerifyLogRecordMatches : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyLogRecordMatches instance = new VerifyLogRecordMatches();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyLogRecordMatches()
        {
            LogCompareRecordID = "yourtext";
            LogsRecordID = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyLogRecordMatches Instance
        {
            get { return instance; }
        }

#region Variables

        string _LogCompareRecordID;

        /// <summary>
        /// Gets or sets the value of variable LogCompareRecordID.
        /// </summary>
        [TestVariable("0996d35d-93b0-498b-a560-232c3515dec3")]
        public string LogCompareRecordID
        {
            get { return _LogCompareRecordID; }
            set { _LogCompareRecordID = value; }
        }

        string _LogsRecordID;

        /// <summary>
        /// Gets or sets the value of variable LogsRecordID.
        /// </summary>
        [TestVariable("435ddacc-fcf2-4617-a7e0-fe04defef761")]
        public string LogsRecordID
        {
            get { return _LogsRecordID; }
            set { _LogsRecordID = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Verifying Log Window is visible
            Report.Log(ReportLevel.Info, "Validation", "Verifying Log Window is visible\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.LogsScreen.WindowLog'.", repo.ApplicationUnderTest.LogsScreen.WindowLogInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LogsScreen.WindowLogInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            // Fetching the Record ID displaying on Log Screen
            Report.Log(ReportLevel.Info, "Get Value", "Fetching the Record ID displaying on Log Screen\r\nGetting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.RecordIDInLog' and assigning its value to variable 'LogsRecordID'.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(1));
            LogsRecordID = repo.ApplicationUnderTest.LogsScreen.RecordIDInLog.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", LogsRecordID, new RecordItemIndex(2));
            
            // Veriying the new Record ID fetched earlier from dataviewer matches record ID in Logs Screen
            Report.Log(ReportLevel.Info, "Validation", "Veriying the new Record ID fetched earlier from dataviewer matches record ID in Logs Screen\r\nValidating AttributeContains (InnerText>$LogCompareRecordID) on item 'ApplicationUnderTest.LogsScreen.RecordIDInLog'.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(3));
            Validate.AttributeContains(repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, "InnerText", LogCompareRecordID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LogsScreen.RecordIDInLog' at Center.", repo.ApplicationUnderTest.LogsScreen.RecordIDInLogInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.LogsScreen.RecordIDInLog.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
