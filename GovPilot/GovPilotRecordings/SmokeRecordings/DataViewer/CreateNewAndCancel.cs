///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateNewAndCancel recording.
    /// </summary>
    [TestModule("02e3af21-84a2-4bcc-b169-731b03d5da9f", ModuleType.Recording, 1)]
    public partial class CreateNewAndCancel : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CreateNewAndCancel instance = new CreateNewAndCancel();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateNewAndCancel()
        {
            PropAddress = "yourtext";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateNewAndCancel Instance
        {
            get { return instance; }
        }

#region Variables

        string _PropAddress;

        /// <summary>
        /// Gets or sets the value of variable PropAddress.
        /// </summary>
        [TestVariable("4275f059-a9a9-4371-bebf-9186056a4926")]
        public string PropAddress
        {
            get { return _PropAddress; }
            set { _PropAddress = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(0));
            Delay.Duration(4000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnCreateNew' at Center.", repo.ApplicationUnderTest.HomePage.BtnCreateNewInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.BtnCreateNew.Click();
            Delay.Milliseconds(0);
            
            // Validating If Property Finder Dialog Displays
            Report.Log(ReportLevel.Info, "Validation", "Validating If Property Finder Dialog Displays\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.TitlePropertyFinder'.", repo.ApplicationUnderTest.HomePage.TitlePropertyFinderInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.TitlePropertyFinderInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.PropSearchVal'", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.HomePage.PropSearchValInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.PropSearchVal' at Center.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PropAddress' with focus on 'ApplicationUnderTest.HomePage.PropSearchVal'.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.PressKeys(PropAddress);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Enter}' with focus on 'ApplicationUnderTest.HomePage.PropSearchVal'.", repo.ApplicationUnderTest.HomePage.PropSearchValInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.HomePage.PropSearchVal.PressKeys("{Down}{Enter}");
            Delay.Milliseconds(0);
            
            // Validating if the selected property displays
            Report.Log(ReportLevel.Info, "Validation", "Validating if the selected property displays\r\nValidating AttributeContains (InnerText>$PropAddress) on item 'ApplicationUnderTest.HomePage.TabDisplayingAddress'.", repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.ApplicationUnderTest.HomePage.TabDisplayingAddressInfo, "InnerText", PropAddress);
            Delay.Milliseconds(0);
            
            // Validating if the selected address displays on the Form page opened
            Report.Log(ReportLevel.Info, "Validation", "Validating if the selected address displays on the Form page opened\r\nValidating AttributeContains (TagValue>$PropAddress) on item 'ApplicationUnderTest.HomePage.AddressFieldOnForm'.", repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, new RecordItemIndex(9));
            Validate.AttributeContains(repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, "TagValue", PropAddress);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
