///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LaunchTheRecordAndCloneIt recording.
    /// </summary>
    [TestModule("2dbb2ab1-331d-41b3-936b-c83836fa62a9", ModuleType.Recording, 1)]
    public partial class LaunchTheRecordAndCloneIt : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static LaunchTheRecordAndCloneIt instance = new LaunchTheRecordAndCloneIt();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LaunchTheRecordAndCloneIt()
        {
            CloneRefNum = "yourValue";
            CloneAddress = "yourValue";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LaunchTheRecordAndCloneIt Instance
        {
            get { return instance; }
        }

#region Variables

        string _CloneRefNum;

        /// <summary>
        /// Gets or sets the value of variable CloneRefNum.
        /// </summary>
        [TestVariable("6aa875e8-057d-4462-a122-c22189764c22")]
        public string CloneRefNum
        {
            get { return _CloneRefNum; }
            set { _CloneRefNum = value; }
        }

        string _CloneAddress;

        /// <summary>
        /// Gets or sets the value of variable CloneAddress.
        /// </summary>
        [TestVariable("a68bb79a-7130-4505-9b7e-1db251c184fc")]
        public string CloneAddress
        {
            get { return _CloneAddress; }
            set { _CloneAddress = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(0));
            Delay.Duration(3000, false);
            
            // Validating that view screen has launched
            Report.Log(ReportLevel.Info, "Validation", "Validating that view screen has launched\r\nValidating AttributeEqual (Visible='True') on item 'TxtAutoGenReferenceNum'.", repo.TxtAutoGenReferenceNumInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.TxtAutoGenReferenceNumInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ViewFormPage.BtnClone' at Center.", repo.ApplicationUnderTest.ViewFormPage.BtnCloneInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.ViewFormPage.BtnClone.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.CloningWizard.TitleCloningWizard'.", repo.ApplicationUnderTest.CloningWizard.TitleCloningWizardInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CloningWizard.TitleCloningWizardInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnNext'.", repo.ApplicationUnderTest.CloningWizard.BtnNextInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.CloningWizard.BtnNext.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnNext'.", repo.ApplicationUnderTest.CloningWizard.BtnNextInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.CloningWizard.BtnNext.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CloningWizard.BtnClone'.", repo.ApplicationUnderTest.CloningWizard.BtnCloneInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.CloningWizard.BtnClone.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.CreateNewScreen.BtnSave' at Center.", repo.ApplicationUnderTest.CreateNewScreen.BtnSaveInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.CreateNewScreen.BtnSave.Click();
            Delay.Milliseconds(0);
            
            // Validating that Reference Number displayed on Grid does not match the Ref Num on newly cloned record for same address
            Report.Log(ReportLevel.Info, "Validation", "Validating that Reference Number displayed on Grid does not match the Ref Num on newly cloned record for same address\r\nValidating AttributeNotEqual (TagValue!=$CloneRefNum) on item 'TxtAutoGenReferenceNum'.", repo.TxtAutoGenReferenceNumInfo, new RecordItemIndex(8));
            Validate.AttributeNotEqual(repo.TxtAutoGenReferenceNumInfo, "TagValue", CloneRefNum);
            Delay.Milliseconds(0);
            
            // Validating That Adress remains the same for cloning same address operation
            Report.Log(ReportLevel.Info, "Validation", "Validating That Adress remains the same for cloning same address operation\r\nValidating AttributeContains (TagValue>$CloneAddress) on item 'ApplicationUnderTest.HomePage.AddressFieldOnForm'.", repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, new RecordItemIndex(9));
            Validate.AttributeContains(repo.ApplicationUnderTest.HomePage.AddressFieldOnFormInfo, "TagValue", CloneAddress);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconCloseRecord' at Center.", repo.ApplicationUnderTest.HomePage.IconCloseRecordInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.HomePage.IconCloseRecord.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
