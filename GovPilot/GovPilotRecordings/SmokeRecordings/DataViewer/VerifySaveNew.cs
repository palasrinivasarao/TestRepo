///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifySaveNew recording.
    /// </summary>
    [TestModule("8f173784-28f0-402c-82e1-106f8e9045c0", ModuleType.Recording, 1)]
    public partial class VerifySaveNew : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifySaveNew instance = new VerifySaveNew();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifySaveNew()
        {
            AutoGenSerialNum = "";
            DateEnteredForNew = "";
            SerialNumCachedInStep1 = "yourtext";
            RefNumOnView = "";
            FetchDateForm = "";
            EditedOnDateViewGrid = "";
            RecordIdentifier = "";
            DateEnteredGrid = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifySaveNew Instance
        {
            get { return instance; }
        }

#region Variables

        string _AutoGenSerialNum;

        /// <summary>
        /// Gets or sets the value of variable AutoGenSerialNum.
        /// </summary>
        [TestVariable("81b62b60-67c5-452d-afd4-104dde84a7c5")]
        public string AutoGenSerialNum
        {
            get { return _AutoGenSerialNum; }
            set { _AutoGenSerialNum = value; }
        }

        string _DateEnteredForNew;

        /// <summary>
        /// Gets or sets the value of variable DateEnteredForNew.
        /// </summary>
        [TestVariable("439d55a3-fb88-44ea-9945-943304bb73f2")]
        public string DateEnteredForNew
        {
            get { return _DateEnteredForNew; }
            set { _DateEnteredForNew = value; }
        }

        string _SerialNumCachedInStep1;

        /// <summary>
        /// Gets or sets the value of variable SerialNumCachedInStep1.
        /// </summary>
        [TestVariable("f46ca813-ced4-48b9-8c1d-69cd13a1baa2")]
        public string SerialNumCachedInStep1
        {
            get { return _SerialNumCachedInStep1; }
            set { _SerialNumCachedInStep1 = value; }
        }

        string _RefNumOnView;

        /// <summary>
        /// Gets or sets the value of variable RefNumOnView.
        /// </summary>
        [TestVariable("52ae8880-a163-4620-83e5-60796afbeb56")]
        public string RefNumOnView
        {
            get { return _RefNumOnView; }
            set { _RefNumOnView = value; }
        }

        string _FetchDateForm;

        /// <summary>
        /// Gets or sets the value of variable FetchDateForm.
        /// </summary>
        [TestVariable("41b7c8a1-e3c8-4b9c-abb2-c4168780a276")]
        public string FetchDateForm
        {
            get { return _FetchDateForm; }
            set { _FetchDateForm = value; }
        }

        string _EditedOnDateViewGrid;

        /// <summary>
        /// Gets or sets the value of variable EditedOnDateViewGrid.
        /// </summary>
        [TestVariable("bbb452ce-d1c0-4751-9d8c-84b00462b29c")]
        public string EditedOnDateViewGrid
        {
            get { return _EditedOnDateViewGrid; }
            set { _EditedOnDateViewGrid = value; }
        }

        string _RecordIdentifier;

        /// <summary>
        /// Gets or sets the value of variable RecordIdentifier.
        /// </summary>
        [TestVariable("ab14f85c-017c-4aed-b5b8-7c6b142618a6")]
        public string RecordIdentifier
        {
            get { return _RecordIdentifier; }
            set { _RecordIdentifier = value; }
        }

        string _DateEnteredGrid;

        /// <summary>
        /// Gets or sets the value of variable DateEnteredGrid.
        /// </summary>
        [TestVariable("14d4ca94-75ef-409c-95d3-25ef32f2c752")]
        public string DateEnteredGrid
        {
            get { return _DateEnteredGrid; }
            set { _DateEnteredGrid = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DateEnteredView.
        /// </summary>
        [TestVariable("03d8d640-dfb0-4121-8c34-f290b498ff34")]
        public string DateEnteredView
        {
            get { return repo.DateEnteredView; }
            set { repo.DateEnteredView = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(0));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Value' from item 'ApplicationUnderTest.CreateNewScreen.TxtSerialNum' and assigning its value to variable 'AutoGenSerialNum'.", repo.ApplicationUnderTest.CreateNewScreen.TxtSerialNumInfo, new RecordItemIndex(1));
            AutoGenSerialNum = repo.ApplicationUnderTest.CreateNewScreen.TxtSerialNum.Element.GetAttributeValueText("Value");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AutoGenSerialNum, new RecordItemIndex(2));
            
            // Validating Serial Number Generated for the record Matches the Next To be used Serial Number Cached Earlier
            Report.Log(ReportLevel.Info, "Validation", "Validating Serial Number Generated for the record Matches the Next To be used Serial Number Cached Earlier\r\nValidating AttributeEqual (Value=$SerialNumCachedInStep1) on item 'ApplicationUnderTest.CreateNewScreen.TxtSerialNum'.", repo.ApplicationUnderTest.CreateNewScreen.TxtSerialNumInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.CreateNewScreen.TxtSerialNumInfo, "Value", SerialNumCachedInStep1);
            Delay.Milliseconds(0);
            
            //Get_value_TxtDateEnteredField(repo.ApplicationUnderTest.ViewFormPage.TxtDateEnteredFieldInfo);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'ApplicationUnderTest.CreateNewScreen.BtnClose'.", repo.ApplicationUnderTest.CreateNewScreen.BtnCloseInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.CreateNewScreen.BtnClose.PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.LinkViewNameCreated' at Center.", repo.ApplicationUnderTest.HomePage.LinkViewNameCreatedInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.HomePage.LinkViewNameCreated.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.SaveMyView' at Center.", repo.ApplicationUnderTest.DataViewerGrid.SaveMyViewInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.DataViewerGrid.SaveMyView.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Title' from item 'ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreated' and assigning its value to variable 'RefNumOnView'.", repo.ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreatedInfo, new RecordItemIndex(9));
            RefNumOnView = repo.ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreated.Element.GetAttributeValueText("Title");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", RefNumOnView, new RecordItemIndex(10));
            
            // Validating That Reference Number assigned to the newly created at Grid View record Matches the Next To be used Serial Number Cached Earlier
            Report.Log(ReportLevel.Info, "Validation", "Validating That Reference Number assigned to the newly created at Grid View record Matches the Next To be used Serial Number Cached Earlier\r\nValidating AttributeContains (Title>$SerialNumCachedInStep1) on item 'ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreated'.", repo.ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreatedInfo, new RecordItemIndex(11));
            Validate.AttributeContains(repo.ApplicationUnderTest.DataViewerGrid.RefNumOnViewCreatedInfo, "Title", SerialNumCachedInStep1);
            Delay.Milliseconds(0);
            
            // Converting Date format of Date Entered on Grid to match the date format on View form screen
            Get_value_DateEntered(repo.ApplicationUnderTest.DataViewerGrid.DateEnteredInfo);
            Delay.Milliseconds(0);
            
            //Get_value_TxtDateEnteredField1(repo.ApplicationUnderTest.ViewFormPage.TxtDateEnteredFieldInfo);
            //Delay.Milliseconds(0);
            
            Report_Log();
            Delay.Milliseconds(0);
            
            // Validating That Date Assigned on Form page matches the Date Entered on grid
            Report.Log(ReportLevel.Info, "Validation", "Validating That Date Assigned on Form page matches the Date Entered on grid\r\nValidating AttributeContains (InnerText>$FetchDateForm) on item 'ApplicationUnderTest.DataViewerGrid.DateEntered'.", repo.ApplicationUnderTest.DataViewerGrid.DateEnteredInfo, new RecordItemIndex(15));
            Validate.AttributeContains(repo.ApplicationUnderTest.DataViewerGrid.DateEnteredInfo, "InnerText", FetchDateForm);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.DataViewerGrid.ValueEditedOnDate' and assigning its value to variable 'EditedOnDateViewGrid'.", repo.ApplicationUnderTest.DataViewerGrid.ValueEditedOnDateInfo, new RecordItemIndex(16));
            EditedOnDateViewGrid = repo.ApplicationUnderTest.DataViewerGrid.ValueEditedOnDate.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", EditedOnDateViewGrid, new RecordItemIndex(17));
            
            // Validating That Date Captured on Form Matches the Edited On Date on Grid View
            Report.Log(ReportLevel.Info, "Validation", "Validating That Date Captured on Form Matches the Edited On Date on Grid View\r\nValidating AttributeContains (InnerText>$FetchDateForm) on item 'ApplicationUnderTest.DataViewerGrid.ValueEditedOnDate'.", repo.ApplicationUnderTest.DataViewerGrid.ValueEditedOnDateInfo, new RecordItemIndex(18));
            Validate.AttributeContains(repo.ApplicationUnderTest.DataViewerGrid.ValueEditedOnDateInfo, "InnerText", FetchDateForm);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.LogsScreen.TdRecordIDNew' and assigning its value to variable 'RecordIdentifier'.", repo.ApplicationUnderTest.LogsScreen.TdRecordIDNewInfo, new RecordItemIndex(19));
            RecordIdentifier = repo.ApplicationUnderTest.LogsScreen.TdRecordIDNew.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", RecordIdentifier, new RecordItemIndex(20));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
