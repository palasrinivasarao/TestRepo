///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.DataViewer
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LaunchPropertyAndValidate recording.
    /// </summary>
    [TestModule("e5e1980d-0270-40a3-a071-e60045e65199", ModuleType.Recording, 1)]
    public partial class LaunchPropertyAndValidate : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static LaunchPropertyAndValidate instance = new LaunchPropertyAndValidate();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LaunchPropertyAndValidate()
        {
            BlockViewed = "";
            LotViewed = "";
            ValidateBlockCached = "yourValue";
            ValidateLotCached = "yourValue";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LaunchPropertyAndValidate Instance
        {
            get { return instance; }
        }

#region Variables

        string _BlockViewed;

        /// <summary>
        /// Gets or sets the value of variable BlockViewed.
        /// </summary>
        [TestVariable("880e608d-9840-480d-b036-0396437896af")]
        public string BlockViewed
        {
            get { return _BlockViewed; }
            set { _BlockViewed = value; }
        }

        string _LotViewed;

        /// <summary>
        /// Gets or sets the value of variable LotViewed.
        /// </summary>
        [TestVariable("2fff04d3-cac2-40be-b41d-030c07ce4a2c")]
        public string LotViewed
        {
            get { return _LotViewed; }
            set { _LotViewed = value; }
        }

        string _ValidateBlockCached;

        /// <summary>
        /// Gets or sets the value of variable ValidateBlockCached.
        /// </summary>
        [TestVariable("00e9fbb5-9079-4d71-9b64-4f39710298f3")]
        public string ValidateBlockCached
        {
            get { return _ValidateBlockCached; }
            set { _ValidateBlockCached = value; }
        }

        string _ValidateLotCached;

        /// <summary>
        /// Gets or sets the value of variable ValidateLotCached.
        /// </summary>
        [TestVariable("daa5a19f-67c5-4661-8718-372f49cd0e45")]
        public string ValidateLotCached
        {
            get { return _ValidateLotCached; }
            set { _ValidateLotCached = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ViewProperty.IconViewProperty' at Center.", repo.ApplicationUnderTest.ViewProperty.IconViewPropertyInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.ViewProperty.IconViewProperty.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(1));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.ViewProperty.TagBlock' and assigning its value to variable 'BlockViewed'.", repo.ApplicationUnderTest.ViewProperty.TagBlockInfo, new RecordItemIndex(2));
            BlockViewed = repo.ApplicationUnderTest.ViewProperty.TagBlock.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", BlockViewed, new RecordItemIndex(3));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.ViewProperty.TagLot' and assigning its value to variable 'LotViewed'.", repo.ApplicationUnderTest.ViewProperty.TagLotInfo, new RecordItemIndex(4));
            LotViewed = repo.ApplicationUnderTest.ViewProperty.TagLot.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", LotViewed, new RecordItemIndex(5));
            
            // Verifying that Viewed Block Matches The Cached Block in DataViewer
            Report.Log(ReportLevel.Info, "Validation", "Verifying that Viewed Block Matches The Cached Block in DataViewer\r\nValidating AttributeContains (InnerText>$ValidateBlockCached) on item 'ApplicationUnderTest.ViewProperty.TagBlock'.", repo.ApplicationUnderTest.ViewProperty.TagBlockInfo, new RecordItemIndex(6));
            Validate.AttributeContains(repo.ApplicationUnderTest.ViewProperty.TagBlockInfo, "InnerText", ValidateBlockCached);
            Delay.Milliseconds(0);
            
            // Verifying that Viewed Lot Matches the Cached Lot in DataViewer
            Report.Log(ReportLevel.Info, "Validation", "Verifying that Viewed Lot Matches the Cached Lot in DataViewer\r\nValidating AttributeContains (InnerText>$ValidateLotCached) on item 'ApplicationUnderTest.ViewProperty.TagLot'.", repo.ApplicationUnderTest.ViewProperty.TagLotInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.ApplicationUnderTest.ViewProperty.TagLotInfo, "InnerText", ValidateLotCached);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconModules' at Center.", repo.ApplicationUnderTest.HomePage.IconModulesInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.HomePage.IconModules.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DataViewerGrid.CloseDataViewer' at Center.", repo.ApplicationUnderTest.DataViewerGrid.CloseDataViewerInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.DataViewerGrid.CloseDataViewer.Click();
            Delay.Milliseconds(0);
            
            Mouse_Click_IconCloseProperty(repo.ApplicationUnderTest.ViewProperty.IconClosePropertyInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
