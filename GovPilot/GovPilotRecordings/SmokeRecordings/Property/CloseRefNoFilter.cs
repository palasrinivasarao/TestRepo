///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CloseRefNoFilter recording.
    /// </summary>
    [TestModule("e14ed51d-15de-4850-9d4d-6b2463b867a8", ModuleType.Recording, 1)]
    public partial class CloseRefNoFilter : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CloseRefNoFilter instance = new CloseRefNoFilter();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CloseRefNoFilter()
        {
            RefNo = "DG-2024-0015";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CloseRefNoFilter Instance
        {
            get { return instance; }
        }

#region Variables

        string _RefNo;

        /// <summary>
        /// Gets or sets the value of variable RefNo.
        /// </summary>
        [TestVariable("da449529-f40b-46da-a8a9-d731492008f5")]
        public string RefNo
        {
            get { return _RefNo; }
            set { _RefNo = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Click_Filters' at Center.", repo.ApplicationUnderTest.Property.Click_FiltersInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Property.Click_Filters.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(1));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Validation_RefNo'.", repo.ApplicationUnderTest.Property.Validation_RefNoInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_RefNoInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Click_Filters' at Center.", repo.ApplicationUnderTest.Property.Click_FiltersInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Property.Click_Filters.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(4));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.CloseFilter' at Center.", repo.ApplicationUnderTest.Property.CloseFilterInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Property.CloseFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.IconHome' at Center.", repo.ApplicationUnderTest.HomePage.IconHomeInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.HomePage.IconHome.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(7));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Search_DogLicense' at Center.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.Property.Search_DogLicense.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$RefNo' with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.Property.Search_DogLicense.PressKeys(RefNo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.Property.Search_DogLicense.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(11));
            Delay.Duration(3000, false);
            
            // Verifying Ref No was displayed
            Report.Log(ReportLevel.Info, "Validation", "Verifying Ref No was displayed\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Validation_Dg20240015'.", repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, "Visible", "True");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
