///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The RecordIdFilter recording.
    /// </summary>
    [TestModule("734db6bf-358b-4dae-a050-ad100321cfaa", ModuleType.Recording, 1)]
    public partial class RecordIdFilter : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static RecordIdFilter instance = new RecordIdFilter();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public RecordIdFilter()
        {
            RecordID = "10";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static RecordIdFilter Instance
        {
            get { return instance; }
        }

#region Variables

        string _RecordID;

        /// <summary>
        /// Gets or sets the value of variable RecordID.
        /// </summary>
        [TestVariable("56d43430-8af0-4c35-bd8a-f08b4ecb7a7b")]
        public string RecordID
        {
            get { return _RecordID; }
            set { _RecordID = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Click_Filters' at Center.", repo.ApplicationUnderTest.Property.Click_FiltersInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Property.Click_Filters.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(1));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Click_AddFilter' at Center.", repo.ApplicationUnderTest.Property.Click_AddFilterInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.Property.Click_AddFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Filter_RecordID' at Center.", repo.ApplicationUnderTest.Property.Filter_RecordIDInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Property.Filter_RecordID.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Return}' with focus on 'ApplicationUnderTest.Property.Filter_RecordID'.", repo.ApplicationUnderTest.Property.Filter_RecordIDInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Property.Filter_RecordID.PressKeys("{Down}{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Filter_Equal' at Center.", repo.ApplicationUnderTest.Property.Filter_EqualInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.Property.Filter_Equal.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(8));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Filter_Equal'.", repo.ApplicationUnderTest.Property.Filter_EqualInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.Property.Filter_Equal.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(10));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$RecordID' with focus on 'ApplicationUnderTest.Property.Input_Number'.", repo.ApplicationUnderTest.Property.Input_NumberInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.Property.Input_Number.PressKeys(RecordID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(12));
            Delay.Duration(1000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
