///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SearchPropertyAddress recording.
    /// </summary>
    [TestModule("5d9128b8-8829-44b7-a942-918d358483b1", ModuleType.Recording, 1)]
    public partial class SearchPropertyAddress : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static SearchPropertyAddress instance = new SearchPropertyAddress();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SearchPropertyAddress()
        {
            Search_Address = "CHANDLER RD";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SearchPropertyAddress Instance
        {
            get { return instance; }
        }

#region Variables

        string _Search_Address;

        /// <summary>
        /// Gets or sets the value of variable Search_Address.
        /// </summary>
        [TestVariable("3a9746f3-d48c-441e-9df9-338a3c91b699")]
        public string Search_Address
        {
            get { return _Search_Address; }
            set { _Search_Address = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 15s.", new RecordItemIndex(0));
            Delay.Duration(15000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.SearchProperty' at Center.", repo.ApplicationUnderTest.Property.SearchPropertyInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.Property.SearchProperty.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Search_Address' with focus on 'ApplicationUnderTest.Property.SearchProperty'.", repo.ApplicationUnderTest.Property.SearchPropertyInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.Property.SearchProperty.PressKeys(Search_Address);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(3));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Return}' with focus on 'ApplicationUnderTest.Property.SearchProperty'.", repo.ApplicationUnderTest.Property.SearchPropertyInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.Property.SearchProperty.PressKeys("{Down}{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.SearchProperty' at Center.", repo.ApplicationUnderTest.Property.SearchPropertyInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Property.SearchProperty.Click();
            Delay.Milliseconds(0);
            
            // Verifying Searched Property Address was displayed in Tax assessment information
            Report.Log(ReportLevel.Info, "Validation", "Verifying Searched Property Address was displayed in Tax assessment information\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Validation_Address'.", repo.ApplicationUnderTest.Property.Validation_AddressInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_AddressInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(7));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Search_Address) on item 'ApplicationUnderTest.Property.Validation_Address'.", repo.ApplicationUnderTest.Property.Validation_AddressInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_AddressInfo, "TagValue", Search_Address);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
