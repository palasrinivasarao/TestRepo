///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SelectDogLicense recording.
    /// </summary>
    [TestModule("ca16815b-18ec-461f-bc55-b30ec480bd84", ModuleType.Recording, 1)]
    public partial class SelectDogLicense : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static SelectDogLicense instance = new SelectDogLicense();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SelectDogLicense()
        {
            Dog_License = "dg-2024-0015";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SelectDogLicense Instance
        {
            get { return instance; }
        }

#region Variables

        string _Dog_License;

        /// <summary>
        /// Gets or sets the value of variable Dog_License.
        /// </summary>
        [TestVariable("a9370042-016d-4d4f-b3f1-4242bbafdb49")]
        public string Dog_License
        {
            get { return _Dog_License; }
            set { _Dog_License = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(0));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.PropertyAddress_dropdown' at Center.", repo.ApplicationUnderTest.Property.PropertyAddress_dropdownInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.Property.PropertyAddress_dropdown.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(2));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ApplicationUnderTest.Property.DogLicense'.", repo.ApplicationUnderTest.Property.DogLicenseInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Property.DogLicense.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.DogLicense' at Center.", repo.ApplicationUnderTest.Property.DogLicenseInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Property.DogLicense.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Search_DogLicense' at Center.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.Property.Search_DogLicense.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dog_License' with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.Property.Search_DogLicense.PressKeys(Dog_License);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(8));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.Property.Search_DogLicense.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(10));
            Delay.Duration(1000, false);
            
            // Verifying entered dog license was displayed
            Report.Log(ReportLevel.Info, "Validation", "Verifying entered dog license was displayed\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Validation_Dg20240015'.", repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(12));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Dog_License) on item 'ApplicationUnderTest.Property.Validation_Dg20240015'.", repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Validation_Dg20240015Info, "InnerText", Dog_License);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.Click_Form' at Center.", repo.ApplicationUnderTest.Property.Click_FormInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.Property.Click_Form.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(15));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ApplicationUnderTest.Property.DvProcessName'.", repo.ApplicationUnderTest.Property.DvProcessNameInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.Property.DvProcessName.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{PageUp}' with focus on 'ApplicationUnderTest.Property.DvProcessName'.", repo.ApplicationUnderTest.Property.DvProcessNameInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.Property.DvProcessName.PressKeys("{PageUp}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(18));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.CloseXCloseTab' at Center.", repo.ApplicationUnderTest.Property.CloseXCloseTabInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.Property.CloseXCloseTab.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(20));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Property.Search_DogLicense);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Property.Search_DogLicense'.", repo.ApplicationUnderTest.Property.Search_DogLicenseInfo, new RecordItemIndex(21));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Property.Search_DogLicense);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
