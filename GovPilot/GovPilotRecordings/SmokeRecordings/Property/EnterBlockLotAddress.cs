///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EnterBlockLotAddress recording.
    /// </summary>
    [TestModule("27d3168b-c69c-4381-8720-a09ce9ceb62a", ModuleType.Recording, 1)]
    public partial class EnterBlockLotAddress : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static EnterBlockLotAddress instance = new EnterBlockLotAddress();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EnterBlockLotAddress()
        {
            Block = "10001";
            Lot = "10";
            City = "JACKSON";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EnterBlockLotAddress Instance
        {
            get { return instance; }
        }

#region Variables

        string _Block;

        /// <summary>
        /// Gets or sets the value of variable Block.
        /// </summary>
        [TestVariable("b31fdb89-8726-49c7-976d-8d649c445bc5")]
        public string Block
        {
            get { return _Block; }
            set { _Block = value; }
        }

        string _Lot;

        /// <summary>
        /// Gets or sets the value of variable Lot.
        /// </summary>
        [TestVariable("387901f9-17f4-48f3-a430-9ce8918de981")]
        public string Lot
        {
            get { return _Lot; }
            set { _Lot = value; }
        }

        string _City;

        /// <summary>
        /// Gets or sets the value of variable City.
        /// </summary>
        [TestVariable("0e614091-9c55-4991-b5ea-969b3f883a7e")]
        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Property.PropertyAddress_dropdown' at Center.", repo.ApplicationUnderTest.Property.PropertyAddress_dropdownInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Property.PropertyAddress_dropdown.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}{Down}{Down}{Return}' with focus on 'ApplicationUnderTest.Property.PropertyAddress_dropdown'.", repo.ApplicationUnderTest.Property.PropertyAddress_dropdownInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.Property.PropertyAddress_dropdown.PressKeys("{Down}{Down}{Down}{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(2));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Block' with focus on 'ApplicationUnderTest.Property.Search_Block'.", repo.ApplicationUnderTest.Property.Search_BlockInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.Property.Search_Block.PressKeys(Block);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Search_Block'.", repo.ApplicationUnderTest.Property.Search_BlockInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.Property.Search_Block.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lot' with focus on 'ApplicationUnderTest.Property.Search_Lot'.", repo.ApplicationUnderTest.Property.Search_LotInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.Property.Search_Lot.PressKeys(Lot);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(7));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Search_Lot'.", repo.ApplicationUnderTest.Property.Search_LotInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.Property.Search_Lot.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(9));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$City' with focus on 'ApplicationUnderTest.Property.Search_City'.", repo.ApplicationUnderTest.Property.Search_CityInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.Property.Search_City.PressKeys(City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(11));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}' with focus on 'ApplicationUnderTest.Property.Search_City'.", repo.ApplicationUnderTest.Property.Search_CityInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.Property.Search_City.PressKeys("{Return}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
