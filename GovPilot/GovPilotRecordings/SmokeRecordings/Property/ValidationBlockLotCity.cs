///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Property
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidationBlockLotCity recording.
    /// </summary>
    [TestModule("c60a459e-b56a-4250-bac6-7515024e54ed", ModuleType.Recording, 1)]
    public partial class ValidationBlockLotCity : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static ValidationBlockLotCity instance = new ValidationBlockLotCity();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidationBlockLotCity()
        {
            City = "JACKSON";
            Block = "10001";
            Lot = "10";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidationBlockLotCity Instance
        {
            get { return instance; }
        }

#region Variables

        string _City;

        /// <summary>
        /// Gets or sets the value of variable City.
        /// </summary>
        [TestVariable("fbccec5e-df16-415a-81e7-351fd3357526")]
        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

        string _Block;

        /// <summary>
        /// Gets or sets the value of variable Block.
        /// </summary>
        [TestVariable("87b9745d-7286-4f73-bab2-34c24d5634e6")]
        public string Block
        {
            get { return _Block; }
            set { _Block = value; }
        }

        string _Lot;

        /// <summary>
        /// Gets or sets the value of variable Lot.
        /// </summary>
        [TestVariable("4174a14c-b202-425c-af9c-68c0a174226e")]
        public string Lot
        {
            get { return _Lot; }
            set { _Lot = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(0));
            Delay.Duration(1000, false);
            
            // Verifying Selected City was displayed in PHYSICAL ADDRESS INFORMATION
            Report.Log(ReportLevel.Info, "Validation", "Verifying Selected City was displayed in PHYSICAL ADDRESS INFORMATION\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.City_JACKSON'.", repo.ApplicationUnderTest.Property.City_JACKSONInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.City_JACKSONInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(2));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$City) on item 'ApplicationUnderTest.Property.City_JACKSON'.", repo.ApplicationUnderTest.Property.City_JACKSONInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.City_JACKSONInfo, "TagValue", City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Next}' with focus on 'ApplicationUnderTest.Property.Block_10001'.", repo.ApplicationUnderTest.Property.Block_10001Info, new RecordItemIndex(4));
            repo.ApplicationUnderTest.Property.Block_10001.PressKeys("{Next}");
            Delay.Milliseconds(0);
            
            // Verifying Selected Block was displayed in PHYSICAL ADDRESS INFORMATION
            Report.Log(ReportLevel.Info, "Validation", "Verifying Selected Block was displayed in PHYSICAL ADDRESS INFORMATION\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Block_10001'.", repo.ApplicationUnderTest.Property.Block_10001Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Block_10001Info, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Block) on item 'ApplicationUnderTest.Property.Block_10001'.", repo.ApplicationUnderTest.Property.Block_10001Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Block_10001Info, "TagValue", Block);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(8));
            Delay.Duration(1000, false);
            
            // Verifying Selected Lot was displayed in PHYSICAL ADDRESS INFORMATION
            Report.Log(ReportLevel.Info, "Validation", "Verifying Selected Lot was displayed in PHYSICAL ADDRESS INFORMATION\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.Property.Lot_10'.", repo.ApplicationUnderTest.Property.Lot_10Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Lot_10Info, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(10));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Lot) on item 'ApplicationUnderTest.Property.Lot_10'.", repo.ApplicationUnderTest.Property.Lot_10Info, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Property.Lot_10Info, "TagValue", Lot);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
