///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CancelViewOperation recording.
    /// </summary>
    [TestModule("1e0fdd9a-2ffd-4206-8889-778e7b559d05", ModuleType.Recording, 1)]
    public partial class CancelViewOperation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CancelViewOperation instance = new CancelViewOperation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CancelViewOperation()
        {
            StatusValue = "New";
            SaveAsViewTitle = "";
            ViewName = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CancelViewOperation Instance
        {
            get { return instance; }
        }

#region Variables

        string _StatusValue;

        /// <summary>
        /// Gets or sets the value of variable StatusValue.
        /// </summary>
        [TestVariable("fd12bc4e-d0e0-438b-86a5-b7b8a4010fb6")]
        public string StatusValue
        {
            get { return _StatusValue; }
            set { _StatusValue = value; }
        }

        string _SaveAsViewTitle;

        /// <summary>
        /// Gets or sets the value of variable SaveAsViewTitle.
        /// </summary>
        [TestVariable("982d717b-bee8-4eed-a6e4-dd494654ea66")]
        public string SaveAsViewTitle
        {
            get { return _SaveAsViewTitle; }
            set { _SaveAsViewTitle = value; }
        }

        string _ViewName;

        /// <summary>
        /// Gets or sets the value of variable ViewName.
        /// </summary>
        [TestVariable("b1093a9e-4c0b-4155-aa0b-ecd98fc99ec2")]
        public string ViewName
        {
            get { return _ViewName; }
            set { _ViewName = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ViewCancelled.
        /// </summary>
        [TestVariable("128156d2-1185-4fc5-909a-8bbd3193b397")]
        public string ViewCancelled
        {
            get { return repo.ViewCancelled; }
            set { repo.ViewCancelled = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Cancel View Operation
            Report.Log(ReportLevel.Info, "Section", "Cancel View Operation", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_ViewName_All'", repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Enabled' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_ViewName_All'", repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo.WaitForAttributeEqual(30000, "Enabled", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new ActionTimeout(10000), new RecordItemIndex(3));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Enabled' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Enabled", "True");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(6));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Filter' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Filter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(8));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilter'", repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo, new ActionTimeout(10000), new RecordItemIndex(9));
            repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilter'", repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Enabled' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilter'", repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo.WaitForAttributeEqual(5000, "Enabled", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilter' at Center.", repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilterInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.DogLicensePage.BtnIcon_AddFilter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Status Column Option is Selected from the Dropdown", new RecordItemIndex(13));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite'", repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_FavouriteInfo, new ActionTimeout(5000), new RecordItemIndex(14));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_FavouriteInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_FavouriteInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down 6} ' with focus on 'ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite'.", repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_FavouriteInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite.PressKeys("{Down 6} ");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(17));
            Delay.Duration(200, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Enter}' with focus on 'ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite'.", repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_FavouriteInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Drpdown_Favourite.PressKeys("{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(19));
            Delay.Duration(200, false);
            
            Report.Log(ReportLevel.Info, "User", "The Records are filtered based on the  Status column that should contain the value New", new RecordItemIndex(20));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_Status'", repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_StatusInfo, new ActionTimeout(5000), new RecordItemIndex(21));
            repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_StatusInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$StatusValue' with focus on 'ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_Status'.", repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_StatusInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_Status.PressKeys(StatusValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(23));
            Delay.Duration(200, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Enter}' with focus on 'ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_Status'.", repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_StatusInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.DogLicensePage.TxtBox_FilterValue_Status.PressKeys("{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(25));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new ActionTimeout(5000), new RecordItemIndex(26));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Filter' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(27));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Filter.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(28));
            Delay.Duration(500, false);
            
            // Save As Dialog Window Operations
            Report.Log(ReportLevel.Info, "Section", "Save As Dialog Window Operations", new RecordItemIndex(29));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_SaveAs'", repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAsInfo, new RecordItemIndex(30));
            repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAsInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1s for the attribute 'Enabled' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_SaveAs'", repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAsInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAsInfo.WaitForAttributeEqual(1000, "Enabled", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_SaveAs' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAsInfo, new RecordItemIndex(32));
            repo.ApplicationUnderTest.DogLicensePage.Btn_SaveAs.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "Validation for Save View Window", new RecordItemIndex(33));
            
            // Validate the save as window popup exists
            Report.Log(ReportLevel.Info, "Validation", "Validate the save as window popup exists\r\nValidating Exists on item 'ApplicationUnderTest.DogLicensePage.DialogWindow_SaveAsView'.", repo.ApplicationUnderTest.DogLicensePage.DialogWindow_SaveAsViewInfo, new RecordItemIndex(34));
            Validate.Exists(repo.ApplicationUnderTest.DogLicensePage.DialogWindow_SaveAsViewInfo);
            Delay.Milliseconds(0);
            
            // Validate the title of save as window exists
            Report.Log(ReportLevel.Info, "Validation", "Validate the title of save as window exists\r\nValidating AttributeEqual (InnerText=$SaveAsViewTitle) on item 'ApplicationUnderTest.DogLicensePage.PopWindowTitle_SaveAs'.", repo.ApplicationUnderTest.DogLicensePage.PopWindowTitle_SaveAsInfo, new RecordItemIndex(35));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.PopWindowTitle_SaveAsInfo, "InnerText", SaveAsViewTitle);
            Delay.Milliseconds(0);
            
            // Validate if the textbox of save as view name exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the textbox of save as view name exists\r\nValidating Exists on item 'ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewName'.", repo.ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewNameInfo, new RecordItemIndex(36));
            Validate.Exists(repo.ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewNameInfo);
            Delay.Milliseconds(0);
            
            // Validate cancel button exists
            Report.Log(ReportLevel.Info, "Validation", "Validate cancel button exists\r\nValidating Exists on item 'ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewName'.", repo.ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewNameInfo, new RecordItemIndex(37));
            Validate.Exists(repo.ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewNameInfo);
            Delay.Milliseconds(0);
            
            // Validate save button exists
            Report.Log(ReportLevel.Info, "Validation", "Validate save button exists\r\nValidating Exists on item 'ApplicationUnderTest.DogLicensePage.Btn_SaveViewName'.", repo.ApplicationUnderTest.DogLicensePage.Btn_SaveViewNameInfo, new RecordItemIndex(38));
            Validate.Exists(repo.ApplicationUnderTest.DogLicensePage.Btn_SaveViewNameInfo);
            Delay.Milliseconds(0);
            
            // The Cancel Button is clicked from the Save as Window Dialog after entering a view name
            Report.Log(ReportLevel.Info, "Section", "The Cancel Button is clicked from the Save as Window Dialog after entering a view name", new RecordItemIndex(39));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ViewName' with focus on 'ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewName'.", repo.ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewNameInfo, new RecordItemIndex(40));
            repo.ApplicationUnderTest.DogLicensePage.TxtBox_SaveAs_ViewName.PressKeys(ViewName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(41));
            Delay.Duration(200, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewName' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewNameInfo, new RecordItemIndex(42));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Cancel_ViewName.Click();
            Delay.Milliseconds(0);
            
            // Validate the close View buttton exists
            Report.Log(ReportLevel.Info, "Validation", "Validate the close View buttton exists\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview'.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(43));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(44));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Closeview.Click();
            Delay.Milliseconds(0);
            
            // Verify the Save Cancelled View name doesnot exists in the Add Tile Window
            Report.Log(ReportLevel.Info, "Section", "Verify the Save Cancelled View name doesnot exists in the Add Tile Window", new RecordItemIndex(45));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(46));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Link_AddTile'", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new RecordItemIndex(47));
            repo.ApplicationUnderTest.HomePage.Link_AddTileInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Link_AddTile' at Center.", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new RecordItemIndex(48));
            repo.ApplicationUnderTest.HomePage.Link_AddTile.Click();
            Delay.Milliseconds(0);
            
            // Validate the View name does not exists while clicking on Add Tile button
            Report.Log(ReportLevel.Info, "Validation", "Validate the View name does not exists while clicking on Add Tile button\r\nValidating NotExists on item 'ApplicationUnderTest.HomePage.TileNameAddTile'.", repo.ApplicationUnderTest.HomePage.TileNameAddTileInfo, new RecordItemIndex(49));
            Validate.NotExists(repo.ApplicationUnderTest.HomePage.TileNameAddTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Cancelled View Name Doesnot exist", new RecordItemIndex(50));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_CloseTile'", repo.ApplicationUnderTest.HomePage.Btn_CloseTileInfo, new RecordItemIndex(51));
            repo.ApplicationUnderTest.HomePage.Btn_CloseTileInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_CloseTile' at Center.", repo.ApplicationUnderTest.HomePage.Btn_CloseTileInfo, new RecordItemIndex(52));
            repo.ApplicationUnderTest.HomePage.Btn_CloseTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(53));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(54));
            Delay.Duration(1000, false);
            
            HelperClass.ChangeBackResolution();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Resolution got changed to 100%", new RecordItemIndex(56));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
