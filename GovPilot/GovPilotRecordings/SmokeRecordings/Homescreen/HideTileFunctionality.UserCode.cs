///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
    public partial class HideTileFunctionality
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void HideTile(string viewname)
        {
        	string Text="^ViewName_[a-zA-Z0-9_]{5}$";
            string xpath = $"/dom[@domain='platformqa.govpilot.com']//div[#'tiles-container']//div//div/div//ul//span[@innertext~'{Text}']";
           
            
            IList<SpanTag> elements = Host.Local.Find<SpanTag>(xpath);
        	
        	if (elements.Count == 0)
        	{
            	Ranorex.Report.Error("No elements found for the given XPath");
            	return;
        	}
        	
        	
        	// Iterate through each element and verify its inner text
        	for (int index = 0; index < elements.Count; index++)
        	{
        		var actualText = elements[index].Element.GetAttributeValue("InnerText");
        		Ranorex.Report.Info("Innertext is "+actualText);
        		Ranorex.Report.Info("Index of Iteration is "+index);
        		int i= index+1;
        		if (actualText.Equals(viewname))
            	{
                Ranorex.Report.Success("Success.The Added Tile Name Matches");
                ITag cxtMenu= repo.ApplicationUnderTest.HomePage.Btn_ContextMenu.GetPath()+"/div["+i+"]/div/div[1]/div/div[2]/i";
                cxtMenu.Click();
                Delay.Duration(1000);
                Ranorex.Report.Success("Success.ContextMenu is Clicked");
         
                ATag hideTile = repo.ApplicationUnderTest.HomePage.Btn_ContextMenu.GetPath()+"/div["+i+"]/div/div[1]/div/div[2]//a[@innertext~'Hide Tile']";
                hideTile.EnsureVisible();
                hideTile.Click();
                Delay.Duration(1000);
                Ranorex.Report.Success("Success.Hide Tile Button is clicked");
                break;
                }
            	else
            	{
                Ranorex.Report.Info("The Added Tile Name does not Match");
            	}
        	}
        }

    }
}
