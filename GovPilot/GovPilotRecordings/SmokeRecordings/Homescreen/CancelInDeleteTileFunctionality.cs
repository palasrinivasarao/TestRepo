///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CancelInDeleteTileFunctionality recording.
    /// </summary>
    [TestModule("ca84cb28-c395-4835-b680-144339bc2fd7", ModuleType.Recording, 1)]
    public partial class CancelInDeleteTileFunctionality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static CancelInDeleteTileFunctionality instance = new CancelInDeleteTileFunctionality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CancelInDeleteTileFunctionality()
        {
            ViewValue1 = "";
            ViewValue2 = "";
            ViewValue3 = "";
            ViewValue4 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CancelInDeleteTileFunctionality Instance
        {
            get { return instance; }
        }

#region Variables

        string _ViewValue1;

        /// <summary>
        /// Gets or sets the value of variable ViewValue1.
        /// </summary>
        [TestVariable("67984fc9-a42f-481a-a83d-dd6f3f8ca364")]
        public string ViewValue1
        {
            get { return _ViewValue1; }
            set { _ViewValue1 = value; }
        }

        string _ViewValue2;

        /// <summary>
        /// Gets or sets the value of variable ViewValue2.
        /// </summary>
        [TestVariable("99905d00-8718-4d17-90e7-8d568da77ebe")]
        public string ViewValue2
        {
            get { return _ViewValue2; }
            set { _ViewValue2 = value; }
        }

        string _ViewValue3;

        /// <summary>
        /// Gets or sets the value of variable ViewValue3.
        /// </summary>
        [TestVariable("1aac42b9-6ad8-4de7-92e2-5765d7e0e27a")]
        public string ViewValue3
        {
            get { return _ViewValue3; }
            set { _ViewValue3 = value; }
        }

        string _ViewValue4;

        /// <summary>
        /// Gets or sets the value of variable ViewValue4.
        /// </summary>
        [TestVariable("cc284817-3028-446e-9366-6fd84f6a5723")]
        public string ViewValue4
        {
            get { return _ViewValue4; }
            set { _ViewValue4 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // ToVerify if the Added Tile Exists in the Home Page with the views
            Report.Log(ReportLevel.Info, "Section", "ToVerify if the Added Tile Exists in the Home Page with the views", new RecordItemIndex(1));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // To Verify if the First View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the First View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile' and assigning its value to variable 'ViewValue1'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(4));
            ViewValue1 = repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ViewValue1, new RecordItemIndex(5));
            
            // To Verify if the Second View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Second View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile' and assigning its value to variable 'ViewValue2'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(7));
            ViewValue2 = repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ViewValue2, new RecordItemIndex(8));
            
            // To Verify if the Third View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Third View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(9));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile' and assigning its value to variable 'ViewValue3'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(10));
            ViewValue3 = repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ViewValue3, new RecordItemIndex(11));
            
            // To Verify if the Fourth View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Fourth View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(12));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile' and assigning its value to variable 'ViewValue4'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(13));
            ViewValue4 = repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ViewValue4, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(15));
            Delay.Duration(200, false);
            
            // To Perform Delete Tile Operation
            Report.Log(ReportLevel.Info, "Section", "To Perform Delete Tile Operation", new RecordItemIndex(16));
            
            Report.Log(ReportLevel.Info, "User", "The Context Menu of the Tile in the Home page is to be clicked", new RecordItemIndex(17));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ContextMenu'", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // Verifying if the Context Menu of Three Dots exists for the operation to choose from
            Report.Log(ReportLevel.Info, "Validation", "Verifying if the Context Menu of Three Dots exists for the operation to choose from\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ContextMenu'.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(19));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ContextMenu' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenu.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(21));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "User", "The option of Delete Tile is selected from the Context Menu", new RecordItemIndex(22));
            
            // Verifying if the Hide Tile option is Present after clicking on the context menu of the Tile
            Report.Log(ReportLevel.Info, "Wait", "Verifying if the Hide Tile option is Present after clicking on the context menu of the Tile\r\nWaiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_DeleteTile'", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ApplicationUnderTest.HomePage.Btn_DeleteTile'.", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(24));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_DeleteTile' at Center.", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(26));
            Delay.Duration(300, false);
            
            // To Verify Delete Pop up window and Click on Cancel Button
            Report.Log(ReportLevel.Info, "Section", "To Verify Delete Pop up window and Click on Cancel Button", new RecordItemIndex(27));
            
            Report.Log(ReportLevel.Info, "User", "To Verify Delete Pop up window and Click on Cancel Button", new RecordItemIndex(28));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindow'", repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // Validating if the Delete Pop window Appears on Click of Delete Button
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Delete Pop window Appears on Click of Delete Button\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindow'.", repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo, new RecordItemIndex(30));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_Delete'", repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            // Validating if the Button Delete Is Present On the Delete Pop Window
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Button Delete Is Present On the Delete Pop Window\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_Delete'.", repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo, new RecordItemIndex(32));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_Cancel'", repo.ApplicationUnderTest.HomePage.Btn_CancelInfo, new RecordItemIndex(33));
            repo.ApplicationUnderTest.HomePage.Btn_CancelInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            // Validating if the Button Cancel Is Present On the Delete Pop Window
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Button Cancel Is Present On the Delete Pop Window\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_Cancel'.", repo.ApplicationUnderTest.HomePage.Btn_CancelInfo, new RecordItemIndex(34));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_CancelInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_Cancel' at Center.", repo.ApplicationUnderTest.HomePage.Btn_CancelInfo, new RecordItemIndex(35));
            repo.ApplicationUnderTest.HomePage.Btn_Cancel.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(36));
            Delay.Duration(1000, false);
            
            // Verify the Tile Didnot Get Deleted by Verifying the Views are still present on the Tile On the Home Page
            Report.Log(ReportLevel.Info, "Section", "Verify the Tile Didnot Get Deleted by Verifying the Views are still present on the Tile On the Home Page", new RecordItemIndex(37));
            
            // To Verify if the First View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the First View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewValue1) on item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(38));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, "InnerText", ViewValue1);
            Delay.Milliseconds(0);
            
            // To Verify if the Second View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Second View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewValue2) on item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(39));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, "InnerText", ViewValue2);
            Delay.Milliseconds(0);
            
            // To Verify if the Third View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Third View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewValue3) on item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(40));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, "InnerText", ViewValue3);
            Delay.Milliseconds(0);
            
            // To Verify if the Fourth View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Fourth View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewValue4) on item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(41));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, "InnerText", ViewValue4);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(42));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "User", "Successfully Verified the Cancel Operation In Delete Tile Funtionality", new RecordItemIndex(43));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
