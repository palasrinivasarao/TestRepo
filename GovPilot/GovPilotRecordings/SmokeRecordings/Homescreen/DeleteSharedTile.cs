///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeleteSharedTile recording.
    /// </summary>
    [TestModule("6261e5d4-ad79-4b2a-a6ec-0a6d1de4d305", ModuleType.Recording, 1)]
    public partial class DeleteSharedTile : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static DeleteSharedTile instance = new DeleteSharedTile();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeleteSharedTile()
        {
            TxtOnTile = "Add a tile";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeleteSharedTile Instance
        {
            get { return instance; }
        }

#region Variables

        string _TxtOnTile;

        /// <summary>
        /// Gets or sets the value of variable TxtOnTile.
        /// </summary>
        [TestVariable("f9f38b04-bb83-4a02-991a-e10fe484f3bf")]
        public string TxtOnTile
        {
            get { return _TxtOnTile; }
            set { _TxtOnTile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // To Perform Delete Tile Operation
            Report.Log(ReportLevel.Info, "Section", "To Perform Delete Tile Operation", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "User", "To Perform Delete Tile Operation", new RecordItemIndex(1));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Link_AddTile'", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.HomePage.Link_AddTileInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "User", "The Context Menu of the Tile in the Home page is to be clicked", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ContextMenu'", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // Verifying if the Context Menu of Three Dots exists for the operation to choose from
            Report.Log(ReportLevel.Info, "Validation", "Verifying if the Context Menu of Three Dots exists for the operation to choose from\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ContextMenu'.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ContextMenu' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenu.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(8));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "User", "The option of Delete Tile is selected from the Context Menu", new RecordItemIndex(9));
            
            // Verifying if the Delete Tile option is Present after clicking on the context menu of the Tile
            Report.Log(ReportLevel.Info, "Wait", "Verifying if the Delete Tile option is Present after clicking on the context menu of the Tile\r\nWaiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_DeleteTile'", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ApplicationUnderTest.HomePage.Btn_DeleteTile'.", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(11));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_DeleteTile' at Center.", repo.ApplicationUnderTest.HomePage.Btn_DeleteTileInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(13));
            Delay.Duration(1000, false);
            
            // To Verify Delete Pop up window and Click on Delete Button
            Report.Log(ReportLevel.Info, "Section", "To Verify Delete Pop up window and Click on Delete Button", new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "User", "To Verify Delete Pop up window and Click on Delete Button", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindow'", repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // Validating if the Delete Pop window Appears on Click of Delete Button
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Delete Pop window Appears on Click of Delete Button\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindow'.", repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo, new RecordItemIndex(17));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Txt_OnDeletePopUpWindowInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_Delete'", repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            // Validating if the Button Delete Is Present On the Delete Pop Window
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Button Delete Is Present On the Delete Pop Window\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_Delete'.", repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo, new RecordItemIndex(19));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_Delete' at Center.", repo.ApplicationUnderTest.HomePage.Btn_DeleteInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.HomePage.Btn_Delete.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(21));
            Delay.Duration(1000, false);
            
            // Verify the First Tile Got Deleted With No Views On it
            Report.Log(ReportLevel.Info, "Section", "Verify the First Tile Got Deleted With No Views On it", new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "User", "Verify the First Tile Got Deleted", new RecordItemIndex(23));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$TxtOnTile) on item 'ApplicationUnderTest.HomePage.TxtTile_Name'.", repo.ApplicationUnderTest.HomePage.TxtTile_NameInfo, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.TxtTile_NameInfo, "InnerText", TxtOnTile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Link_AddTile'", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.HomePage.Link_AddTileInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "User", "Tile Deleted Succesfully", new RecordItemIndex(27));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
