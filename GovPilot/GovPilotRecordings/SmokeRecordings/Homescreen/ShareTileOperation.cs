///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ShareTileOperation recording.
    /// </summary>
    [TestModule("4b180bfc-8f39-4efa-9789-2c68f99d911b", ModuleType.Recording, 1)]
    public partial class ShareTileOperation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static ShareTileOperation instance = new ShareTileOperation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ShareTileOperation()
        {
            EmailId = "";
            FirstViewNameOnTile = "";
            SecondViewOnTile = "";
            ThirdViewOnTile = "";
            FourthViewOnTile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ShareTileOperation Instance
        {
            get { return instance; }
        }

#region Variables

        string _EmailId;

        /// <summary>
        /// Gets or sets the value of variable EmailId.
        /// </summary>
        [TestVariable("acee1c0b-a7f9-4f9c-ab4b-a18eb271311b")]
        public string EmailId
        {
            get { return _EmailId; }
            set { _EmailId = value; }
        }

        string _FirstViewNameOnTile;

        /// <summary>
        /// Gets or sets the value of variable FirstViewNameOnTile.
        /// </summary>
        [TestVariable("fb776829-ce34-4ae0-8bfa-a98266a4258a")]
        public string FirstViewNameOnTile
        {
            get { return _FirstViewNameOnTile; }
            set { _FirstViewNameOnTile = value; }
        }

        string _SecondViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable SecondViewOnTile.
        /// </summary>
        [TestVariable("a6bea3e3-1a52-4150-868c-97182abaa62f")]
        public string SecondViewOnTile
        {
            get { return _SecondViewOnTile; }
            set { _SecondViewOnTile = value; }
        }

        string _ThirdViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable ThirdViewOnTile.
        /// </summary>
        [TestVariable("a0e323f8-1cc1-42ce-9269-bfd06a0addc3")]
        public string ThirdViewOnTile
        {
            get { return _ThirdViewOnTile; }
            set { _ThirdViewOnTile = value; }
        }

        string _FourthViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable FourthViewOnTile.
        /// </summary>
        [TestVariable("17330aa0-cde7-49a6-a0b2-68c9d49216f7")]
        public string FourthViewOnTile
        {
            get { return _FourthViewOnTile; }
            set { _FourthViewOnTile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            // ToVerify if the Added Tile Exists in the Home page
            Report.Log(ReportLevel.Info, "Section", "ToVerify if the Added Tile Exists in the Home page", new RecordItemIndex(1));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            // To Verify if the First View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the First View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo);
            Delay.Milliseconds(0);
            
            // To Verify if the Second View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Second View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(4));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo);
            Delay.Milliseconds(0);
            
            // To Verify if the Third View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Third View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(5));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo);
            Delay.Milliseconds(0);
            
            // To Verify if the Fourth View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Fourth View Exists on the Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 200ms.", new RecordItemIndex(7));
            Delay.Duration(200, false);
            
            // To Click on Share Tile option from the context Menu
            Report.Log(ReportLevel.Info, "Section", "To Click on Share Tile option from the context Menu", new RecordItemIndex(8));
            
            Report.Log(ReportLevel.Info, "User", "The Context Menu of the Tile in the Home page is to be clicked", new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ContextMenu'", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // Verifying if the Context Menu of Three Dots exists for the operation to choose from
            Report.Log(ReportLevel.Info, "Validation", "Verifying if the Context Menu of Three Dots exists for the operation to choose from\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ContextMenu'.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(11));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ContextMenu' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ContextMenuInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.HomePage.Btn_ContextMenu.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(13));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "User", "The option of Share Tile is selected from the Context Menu", new RecordItemIndex(14));
            
            // Verifying if the Share Tile option is Present after clicking on the context menu of the Tile
            Report.Log(ReportLevel.Info, "Wait", "Verifying if the Share Tile option is Present after clicking on the context menu of the Tile\r\nWaiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ShareTile'", repo.ApplicationUnderTest.HomePage.Btn_ShareTileInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.HomePage.Btn_ShareTileInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ApplicationUnderTest.HomePage.Btn_ShareTile'.", repo.ApplicationUnderTest.HomePage.Btn_ShareTileInfo, new RecordItemIndex(16));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ShareTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ShareTile' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ShareTileInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.HomePage.Btn_ShareTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(18));
            Delay.Duration(1000, false);
            
            // Share Tile Window
            Report.Log(ReportLevel.Info, "Section", "Share Tile Window", new RecordItemIndex(19));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.PopupWindow_ShareTile'", repo.ApplicationUnderTest.HomePage.PopupWindow_ShareTileInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.HomePage.PopupWindow_ShareTileInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // Validating if the Share Tile Pop window Appears
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Share Tile Pop window Appears\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.PopupWindow_ShareTile'.", repo.ApplicationUnderTest.HomePage.PopupWindow_ShareTileInfo, new RecordItemIndex(21));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.PopupWindow_ShareTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTile'", repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            // Validating if the Button Confirm Selection appeared on the Share Tile Pop Window
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Button Confirm Selection appeared on the Share Tile Pop Window\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTile'.", repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo, new RecordItemIndex(23));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_Cancel_ShareTile'", repo.ApplicationUnderTest.HomePage.Btn_Cancel_ShareTileInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.HomePage.Btn_Cancel_ShareTileInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // Validating if the Button Cancel appeared on the Share Tile Pop Window
            Report.Log(ReportLevel.Info, "Validation", "Validating if the Button Cancel appeared on the Share Tile Pop Window\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_Cancel_ShareTile'.", repo.ApplicationUnderTest.HomePage.Btn_Cancel_ShareTileInfo, new RecordItemIndex(25));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_Cancel_ShareTileInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 15s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.TxtBox_Search_ShareTile'", repo.ApplicationUnderTest.HomePage.TxtBox_Search_ShareTileInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.HomePage.TxtBox_Search_ShareTileInfo.WaitForAttributeEqual(15000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EmailId' with focus on 'ApplicationUnderTest.HomePage.TxtBox_Search_ShareTile'.", repo.ApplicationUnderTest.HomePage.TxtBox_Search_ShareTileInfo, new RecordItemIndex(27));
            repo.ApplicationUnderTest.HomePage.TxtBox_Search_ShareTile.PressKeys(EmailId);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(28));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.FirstCheckbox_ShareTile'", repo.ApplicationUnderTest.HomePage.FirstCheckbox_ShareTileInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.HomePage.FirstCheckbox_ShareTileInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.FirstCheckbox_ShareTile' at Center.", repo.ApplicationUnderTest.HomePage.FirstCheckbox_ShareTileInfo, new RecordItemIndex(30));
            repo.ApplicationUnderTest.HomePage.FirstCheckbox_ShareTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTile'", repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTile' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTileInfo, new RecordItemIndex(32));
            repo.ApplicationUnderTest.HomePage.Btn_ConfirmSelection_ShareTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(33));
            Delay.Duration(500, false);
            
            // Validating if the popup window appeared displaying shared tile success
            Report.Log(ReportLevel.Info, "Wait", "Validating if the popup window appeared displaying shared tile success\r\nWaiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.PopWindowTitle_SharedSuccess'", repo.ApplicationUnderTest.HomePage.PopWindowTitle_SharedSuccessInfo, new RecordItemIndex(34));
            repo.ApplicationUnderTest.HomePage.PopWindowTitle_SharedSuccessInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Window_HomePage'", repo.ApplicationUnderTest.HomePage.Window_HomePageInfo, new RecordItemIndex(35));
            repo.ApplicationUnderTest.HomePage.Window_HomePageInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
