///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeleteCreatedViews recording.
    /// </summary>
    [TestModule("49db29a8-1544-4292-af64-be0a1bad3022", ModuleType.Recording, 1)]
    public partial class DeleteCreatedViews : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static DeleteCreatedViews instance = new DeleteCreatedViews();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeleteCreatedViews()
        {
            TxtOnTile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeleteCreatedViews Instance
        {
            get { return instance; }
        }

#region Variables

        string _TxtOnTile;

        /// <summary>
        /// Gets or sets the value of variable TxtOnTile.
        /// </summary>
        [TestVariable("b2179fed-c0e5-4bb9-b922-25abc6d338d0")]
        public string TxtOnTile
        {
            get { return _TxtOnTile; }
            set { _TxtOnTile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "User", "Views Clearance", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_ViewName_All'", repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Enabled' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Enabled", "True");
            
            HelperClass.CleanViews();
            Delay.Milliseconds(0);
            
            // Valdiate the close View buttton exists
            Report.Log(ReportLevel.Info, "Validation", "Valdiate the close View buttton exists\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview'.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Closeview.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            HelperClass.ChangeBackResolution();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Resolution got chnaged to 100%", new RecordItemIndex(10));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
