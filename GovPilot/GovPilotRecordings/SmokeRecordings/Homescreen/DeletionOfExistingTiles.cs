///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeletionOfExistingTiles recording.
    /// </summary>
    [TestModule("6d5bd1ce-b8fb-4e57-ae6d-ad83e959025c", ModuleType.Recording, 1)]
    public partial class DeletionOfExistingTiles : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static DeletionOfExistingTiles instance = new DeletionOfExistingTiles();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeletionOfExistingTiles()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeletionOfExistingTiles Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new ActionTimeout(60000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.HomePage.Link_AddTile'", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new ActionTimeout(30000), new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.Link_AddTileInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.HomePage.Table_RecentRecords'", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new ActionTimeout(30000), new RecordItemIndex(2));
            repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_ViewMore'", repo.ApplicationUnderTest.HomePage.Btn_ViewMoreInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.HomePage.Btn_ViewMoreInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // Validate if the View More Button Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the View More Button Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ViewMore'.", repo.ApplicationUnderTest.HomePage.Btn_ViewMoreInfo, new RecordItemIndex(4));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ViewMoreInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ViewMore' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ViewMoreInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.HomePage.Btn_ViewMore.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.RecentRecords.RecentRecords_Close'", repo.ApplicationUnderTest.RecentRecords.RecentRecords_CloseInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.RecentRecords.RecentRecords_CloseInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // Validate if the Close button exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Close button exists\r\nValidating Exists on item 'ApplicationUnderTest.RecentRecords.RecentRecords_Close'.", repo.ApplicationUnderTest.RecentRecords.RecentRecords_CloseInfo, new RecordItemIndex(7));
            Validate.Exists(repo.ApplicationUnderTest.RecentRecords.RecentRecords_CloseInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RecentRecords.RecentRecords_Close' at Center.", repo.ApplicationUnderTest.RecentRecords.RecentRecords_CloseInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.RecentRecords.RecentRecords_Close.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "Delete Existing Tiles", new RecordItemIndex(9));
            
            HelperClass.CleanTiles();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Existing Tiles  Deleted", new RecordItemIndex(11));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
