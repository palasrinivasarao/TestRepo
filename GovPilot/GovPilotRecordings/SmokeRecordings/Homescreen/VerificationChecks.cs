///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerificationChecks recording.
    /// </summary>
    [TestModule("64a883b8-c9ab-4776-9e6f-6c95b2768ba2", ModuleType.Recording, 1)]
    public partial class VerificationChecks : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerificationChecks instance = new VerificationChecks();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerificationChecks()
        {
            rowCount = "0";
            Option1View = "";
            classname = "";
            FirstViewName = "";
            SecondViewName = "";
            ThirdViewName = "";
            FourthViewName = "";
            FirstViewNameBeforeDelete = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerificationChecks Instance
        {
            get { return instance; }
        }

#region Variables

        string _rowCount;

        /// <summary>
        /// Gets or sets the value of variable rowCount.
        /// </summary>
        [TestVariable("edf02407-85b6-468a-8625-c9408acaeaef")]
        public string rowCount
        {
            get { return _rowCount; }
            set { _rowCount = value; }
        }

        string _Option1View;

        /// <summary>
        /// Gets or sets the value of variable Option1View.
        /// </summary>
        [TestVariable("a8884269-61b4-4cae-b066-639ead27998b")]
        public string Option1View
        {
            get { return _Option1View; }
            set { _Option1View = value; }
        }

        string _classname;

        /// <summary>
        /// Gets or sets the value of variable classname.
        /// </summary>
        [TestVariable("88ac8abc-a503-48b8-8648-dd7d31cb1b4c")]
        public string classname
        {
            get { return _classname; }
            set { _classname = value; }
        }

        string _FirstViewName;

        /// <summary>
        /// Gets or sets the value of variable FirstViewName.
        /// </summary>
        [TestVariable("0798a3f1-4437-4336-8228-3b326eb148d2")]
        public string FirstViewName
        {
            get { return _FirstViewName; }
            set { _FirstViewName = value; }
        }

        string _SecondViewName;

        /// <summary>
        /// Gets or sets the value of variable SecondViewName.
        /// </summary>
        [TestVariable("b027d418-7994-4e29-90f8-cdf10f8eb430")]
        public string SecondViewName
        {
            get { return _SecondViewName; }
            set { _SecondViewName = value; }
        }

        string _ThirdViewName;

        /// <summary>
        /// Gets or sets the value of variable ThirdViewName.
        /// </summary>
        [TestVariable("acf0c847-b47c-4267-ae3a-94639d1bb905")]
        public string ThirdViewName
        {
            get { return _ThirdViewName; }
            set { _ThirdViewName = value; }
        }

        string _FourthViewName;

        /// <summary>
        /// Gets or sets the value of variable FourthViewName.
        /// </summary>
        [TestVariable("bb6e8cec-95ad-48a4-88b2-277b0a5755b1")]
        public string FourthViewName
        {
            get { return _FourthViewName; }
            set { _FourthViewName = value; }
        }

        string _FirstViewNameBeforeDelete;

        /// <summary>
        /// Gets or sets the value of variable FirstViewNameBeforeDelete.
        /// </summary>
        [TestVariable("473439fc-a507-49d7-b78a-ed5066199ff3")]
        public string FirstViewNameBeforeDelete
        {
            get { return _FirstViewNameBeforeDelete; }
            set { _FirstViewNameBeforeDelete = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile' and assigning its value to variable 'FirstViewNameBeforeDelete'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(2));
            FirstViewNameBeforeDelete = repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The First View Added on the Tile is", new RecordItemIndex(3));
            
            Report.Log(ReportLevel.Info, "User", FirstViewNameBeforeDelete, new RecordItemIndex(4));
            
            // To Verify the Operation of Cancel Button Click and Verify the Tile Didnot Get Removed
            Report.Log(ReportLevel.Info, "Section", "To Verify the Operation of Cancel Button Click and Verify the Tile Didnot Get Removed", new RecordItemIndex(5));
            
            // To Verify if the Minus Symbol exists in the Added Tile, Here the First Tile is considered to perform the validation
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Minus Symbol exists in the Added Tile, Here the First Tile is considered to perform the validation\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord'.", repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord' at Center.", repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 100ms.", new RecordItemIndex(8));
            Delay.Duration(100, false);
            
            // On Click of the Minus Symbol on the Added First Tile Record ,The Remove Button is Validated if it exists in the First Record
            Report.Log(ReportLevel.Info, "Validation", "On Click of the Minus Symbol on the Added First Tile Record ,The Remove Button is Validated if it exists in the First Record\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecord'.", repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            // On Click of the Minus Symbol on the Added First Tile Record ,The Cancel Button is Validated if it exists in the First Record
            Report.Log(ReportLevel.Info, "Validation", "On Click of the Minus Symbol on the Added First Tile Record ,The Cancel Button is Validated if it exists in the First Record\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecord'.", repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "Post the Click of the Minus button followed by the Cancel Button ,we are to verify if No tile is removed", new RecordItemIndex(11));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecord' at Center.", repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecord.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 100ms.", new RecordItemIndex(13));
            Delay.Duration(100, false);
            
            HelperClass.ToVerifyAddedTile(FirstViewNameBeforeDelete);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Tile Name of the first record did not get removed post the click of the Cancel Button and it is Verified", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "User", FirstViewNameBeforeDelete, new RecordItemIndex(16));
            
            // To Verify the Operation of Remove Button Click and Verify the Tile Got Deleted
            Report.Log(ReportLevel.Info, "Section", "To Verify the Operation of Remove Button Click and Verify the Tile Got Deleted", new RecordItemIndex(17));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord'", repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            // To Verify if the Minus Symbol exists in the Added Tile, Here the First Tile is considered to perform the validation
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the Minus Symbol exists in the Added Tile, Here the First Tile is considered to perform the validation\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord'.", repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, new RecordItemIndex(19));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord' at Center.", repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecordInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Minus_FirstRecord.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(21));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecord'", repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // On Click of the Minus Symbol on the Added First Tile Record ,The Remove Button is Validated if it exists in the First Record
            Report.Log(ReportLevel.Info, "Validation", "On Click of the Minus Symbol on the Added First Tile Record ,The Remove Button is Validated if it exists in the First Record\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecord'.", repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo, new RecordItemIndex(23));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecord'", repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // On Click of the Minus Symbol on the Added First Tile Record ,The Cancel Button is Validated if it exists in the First Record
            Report.Log(ReportLevel.Info, "Validation", "On Click of the Minus Symbol on the Added First Tile Record ,The Cancel Button is Validated if it exists in the First Record\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecord'.", repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo, new RecordItemIndex(25));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_CancelTile_FirstRecordInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecord' at Center.", repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecordInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.HomePage.Btn_RemoveTile_FirstRecord.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(27));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "User", "Post the Click of the Minus Button followed by Remove Button on the First Tile Record we are validating if the First Tile Record got removed", new RecordItemIndex(28));
            
            HelperClass.ToVerifyTileNotExists(FirstViewNameBeforeDelete, ValueConverter.ArgumentFromString<int>("count", rowCount));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Tile removed successfully is", new RecordItemIndex(30));
            
            Report.Log(ReportLevel.Info, "User", FirstViewName, new RecordItemIndex(31));
            
            // Post The Removal of a Tile, Verifying if the Add Button Is Visible
            Report.Log(ReportLevel.Info, "Section", "Post The Removal of a Tile, Verifying if the Add Button Is Visible", new RecordItemIndex(32));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecord'", repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo, new RecordItemIndex(33));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            // The Maximium No of Tiles that can be added is Four , so On removing one tile The Add Icon is verified to Appear on the Title of Tile
            Report.Log(ReportLevel.Info, "Validation", "The Maximium No of Tiles that can be added is Four , so On removing one tile The Add Icon is verified to Appear on the Title of Tile\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecord'.", repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo, new RecordItemIndex(34));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecord' at Center.", repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo, new RecordItemIndex(35));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecord.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(36));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTile'", repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTileInfo, new RecordItemIndex(37));
            repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTileInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTile' and assigning its value to variable 'Option1View'.", repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTileInfo, new RecordItemIndex(38));
            Option1View = repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The First View Option On Click of Add Icon Button on the Tile", new RecordItemIndex(39));
            
            Report.Log(ReportLevel.Info, "User", Option1View, new RecordItemIndex(40));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTile' at Center.", repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTileInfo, new RecordItemIndex(41));
            repo.ApplicationUnderTest.HomePage.Innertext_FirstViewOptionOnTile.Click();
            Delay.Milliseconds(0);
            
            // To Verify if the Tile Exists
            Report.Log(ReportLevel.Info, "Section", "To Verify if the Tile Exists", new RecordItemIndex(42));
            
            Report.Log(ReportLevel.Info, "User", "To Verify if the Newly added Tile Exists", new RecordItemIndex(43));
            
            HelperClass.ToVerifyAddedTile(Option1View);
            Delay.Milliseconds(0);
            
            // Post The Addition of the Fourth Tile,the Add Icon Button is Validated to Not Be Present
            Report.Log(ReportLevel.Info, "Section", "Post The Addition of the Fourth Tile,the Add Icon Button is Validated to Not Be Present", new RecordItemIndex(45));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'SafeClass' to not equal the specified value $classname. Associated repository item: 'ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecord'", repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo, new RecordItemIndex(46));
            repo.ApplicationUnderTest.HomePage.BtnIcon_Add_FirstRecordInfo.WaitForAttributeNotEqual(5000, "SafeClass", classname);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(47));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(20000, "Visible", "True");
            
            // View Names on Tiles are Fetched post remove Operation
            Report.Log(ReportLevel.Info, "Section", "View Names on Tiles are Fetched post remove Operation", new RecordItemIndex(48));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(49));
            repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile' and assigning its value to variable 'FirstViewName'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(50));
            FirstViewName = repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The First View Added on the Tile is", new RecordItemIndex(51));
            
            Report.Log(ReportLevel.Info, "User", FirstViewName, new RecordItemIndex(52));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile' and assigning its value to variable 'SecondViewName'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(53));
            SecondViewName = repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Second View Added on the Tile is", new RecordItemIndex(54));
            
            Report.Log(ReportLevel.Info, "User", SecondViewName, new RecordItemIndex(55));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile' and assigning its value to variable 'ThirdViewName'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(56));
            ThirdViewName = repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Third View Added on the Tile is", new RecordItemIndex(57));
            
            Report.Log(ReportLevel.Info, "User", ThirdViewName, new RecordItemIndex(58));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile' and assigning its value to variable 'FourthViewName'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(59));
            FourthViewName = repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Fourth View Added on the Tile is", new RecordItemIndex(60));
            
            Report.Log(ReportLevel.Info, "User", FourthViewName, new RecordItemIndex(61));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
