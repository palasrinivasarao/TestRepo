///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The RecentRecordsTable recording.
    /// </summary>
    [TestModule("70c564d8-8768-4c7a-b856-e78bc6b0645b", ModuleType.Recording, 1)]
    public partial class RecentRecordsTable : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static RecentRecordsTable instance = new RecentRecordsTable();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public RecentRecordsTable()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static RecentRecordsTable Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Table_RecentRecords'", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            // Validate if the Title Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Title Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Title_RecentRecords'.", repo.ApplicationUnderTest.HomePage.Title_RecentRecordsInfo, new RecordItemIndex(2));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Title_RecentRecordsInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Property Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Property Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_Property'.", repo.ApplicationUnderTest.HomePage.Column_PropertyInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_PropertyInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Form Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Form Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_Form'.", repo.ApplicationUnderTest.HomePage.Column_FormInfo, new RecordItemIndex(4));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_FormInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Record Type Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Record Type Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_RecordType'.", repo.ApplicationUnderTest.HomePage.Column_RecordTypeInfo, new RecordItemIndex(5));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_RecordTypeInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Reference Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Reference Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_Reference'.", repo.ApplicationUnderTest.HomePage.Column_ReferenceInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_ReferenceInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Status Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Status Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_Status'.", repo.ApplicationUnderTest.HomePage.Column_StatusInfo, new RecordItemIndex(7));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_StatusInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Other Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Other Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_Other'.", repo.ApplicationUnderTest.HomePage.Column_OtherInfo, new RecordItemIndex(8));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_OtherInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Property Address Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Property Address Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_PropertyAddress'.", repo.ApplicationUnderTest.HomePage.Column_PropertyAddressInfo, new RecordItemIndex(9));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_PropertyAddressInfo);
            Delay.Milliseconds(0);
            
            // Validate if the Column Last Modified Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Column Last Modified Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Column_LastModified'.", repo.ApplicationUnderTest.HomePage.Column_LastModifiedInfo, new RecordItemIndex(10));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Column_LastModifiedInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Column Values of the Recent Record Table is Verified", new RecordItemIndex(11));
            
            // Validate if Down Arrow  Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if Down Arrow  Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecords'.", repo.ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecordsInfo, new RecordItemIndex(12));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecordsInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecords' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecordsInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.HomePage.Btn_ArrowDown_RecentRecords.Click();
            Delay.Milliseconds(0);
            
            // Validate if the Recent Records Table Content Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Recent Records Table Content Exists\r\nValidating AttributeEqual (Visible='False') on item 'ApplicationUnderTest.HomePage.Table_RecentRecords'.", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, "Visible", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Table of Recent Records does not appear and is verified", new RecordItemIndex(15));
            
            // Validate if Up Arrow Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if Up Arrow Exists\r\nValidating Exists on item 'ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecords'.", repo.ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecordsInfo, new RecordItemIndex(16));
            Validate.Exists(repo.ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecordsInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecords' at Center.", repo.ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecordsInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.HomePage.Btn_ArrowUp_RecentRecords.Click();
            Delay.Milliseconds(0);
            
            // Validate if the Recent Records Table Content Exists
            Report.Log(ReportLevel.Info, "Validation", "Validate if the Recent Records Table Content Exists\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.HomePage.Table_RecentRecords'.", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Table of Recent Records Appears", new RecordItemIndex(19));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
