///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyViewCountForSecondView recording.
    /// </summary>
    [TestModule("58c50977-1fae-4195-ab01-ed788e34b67e", ModuleType.Recording, 1)]
    public partial class VerifyViewCountForSecondView : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyViewCountForSecondView instance = new VerifyViewCountForSecondView();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyViewCountForSecondView()
        {
            ActualCountValue2 = "";
            ViewName2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyViewCountForSecondView Instance
        {
            get { return instance; }
        }

#region Variables

        string _ActualCountValue2;

        /// <summary>
        /// Gets or sets the value of variable ActualCountValue2.
        /// </summary>
        [TestVariable("20c897c4-708d-4d1c-8f4b-25be231a2afe")]
        public string ActualCountValue2
        {
            get { return _ActualCountValue2; }
            set { _ActualCountValue2 = value; }
        }

        string _ViewName2;

        /// <summary>
        /// Gets or sets the value of variable ViewName2.
        /// </summary>
        [TestVariable("9b6607dc-8908-4851-b19a-56955fbaf2b7")]
        public string ViewName2
        {
            get { return _ViewName2; }
            set { _ViewName2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            // To Verify If the Added Tile Exists
            //Report.Log(ReportLevel.Info, "Section", "To Verify If the Added Tile Exists", new RecordItemIndex(1));
            
            //Report.Log(ReportLevel.Info, "User", "To Verify the Added Tile Exists", new RecordItemIndex(2));
            
            //HelperClass.ToVerifyAddedTile(ViewName2);
            //Delay.Milliseconds(0);
            
            // To Get the Actual Count Value on the Tile on the Home page
            Report.Log(ReportLevel.Info, "Section", "To Get the Actual Count Value on the Tile on the Home page", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "User", "To Fetch the count value from the Tile", new RecordItemIndex(5));
            
            ActualCountValue2 = HelperClass.ToFetchCountValueOnTile(ViewName2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Actual Count on the Tile is", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "User", ActualCountValue2, new RecordItemIndex(8));
            
            // The Second View on the Tile is Clicked
            Report.Log(ReportLevel.Info, "Section", "The Second View on the Tile is Clicked", new RecordItemIndex(9));
            
            // To Verify if the First View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the First View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewName2) on item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, "InnerText", ViewName2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile' at Center.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_ViewName_All'", repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            HelperClass.ClickOnView(ViewName2);
            Delay.Milliseconds(0);
            
            // To Verify if the Filter Value of the Status Column Contains 'New 'Value
            Report.Log(ReportLevel.Info, "Section", "To Verify if the Filter Value of the Status Column Contains 'New 'Value", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_TagValue_Status'", repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_StatusInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_StatusInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            // The Filter Value of the Status Column is Verified to Contain the Value "New"
            Report.Log(ReportLevel.Info, "Validation", "The Filter Value of the Status Column is Verified to Contain the Value \"New\"\r\nValidating AttributeEqual (Value='New') on item 'ApplicationUnderTest.DogLicensePage.Txt_TagValue_Status'.", repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_StatusInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_StatusInfo, "Value", "New");
            Delay.Milliseconds(0);
            
            // To Verify if the Actual Count Value on the Tile Matched with the count Value represented in the Right Most Bottom of the Selected View
            Report.Log(ReportLevel.Info, "Section", "To Verify if the Actual Count Value on the Tile Matched with the count Value represented in the Right Most Bottom of the Selected View", new RecordItemIndex(18));
            
            Report.Log(ReportLevel.Info, "User", "To Verify if the Count Value On the right most bottom of the page matches with the Actual Tile Count", new RecordItemIndex(19));
            
            HelperClass.RetrieveAndVerifyExpectedCountValue(ActualCountValue2);
            Delay.Milliseconds(0);
            
            // To Validate if the Close view Button is visible
            Report.Log(ReportLevel.Info, "Validation", "To Validate if the Close view Button is visible\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview'.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Closeview.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Table_RecentRecords'", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
