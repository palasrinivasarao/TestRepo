///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyShareTileFunctionality recording.
    /// </summary>
    [TestModule("e95a7bce-b06f-4cf2-abaf-da565a6d8dca", ModuleType.Recording, 1)]
    public partial class VerifyShareTileFunctionality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyShareTileFunctionality instance = new VerifyShareTileFunctionality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyShareTileFunctionality()
        {
            LoggedUsername = "";
            FirstViewNameOnTile = "";
            SecondViewOnTile = "";
            ThirdViewOnTile = "";
            FourthViewOnTile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyShareTileFunctionality Instance
        {
            get { return instance; }
        }

#region Variables

        string _LoggedUsername;

        /// <summary>
        /// Gets or sets the value of variable LoggedUsername.
        /// </summary>
        [TestVariable("c8ca8970-9d8c-4109-8656-d88c2bd43d0b")]
        public string LoggedUsername
        {
            get { return _LoggedUsername; }
            set { _LoggedUsername = value; }
        }

        string _FirstViewNameOnTile;

        /// <summary>
        /// Gets or sets the value of variable FirstViewNameOnTile.
        /// </summary>
        [TestVariable("1e3c211f-0802-44d1-a242-cc3d7fd13a5a")]
        public string FirstViewNameOnTile
        {
            get { return _FirstViewNameOnTile; }
            set { _FirstViewNameOnTile = value; }
        }

        string _SecondViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable SecondViewOnTile.
        /// </summary>
        [TestVariable("1ddc157a-28a9-4ca9-94c0-e4808dd6a3c2")]
        public string SecondViewOnTile
        {
            get { return _SecondViewOnTile; }
            set { _SecondViewOnTile = value; }
        }

        string _ThirdViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable ThirdViewOnTile.
        /// </summary>
        [TestVariable("4b1a4e52-7497-4177-852a-848918da1bd9")]
        public string ThirdViewOnTile
        {
            get { return _ThirdViewOnTile; }
            set { _ThirdViewOnTile = value; }
        }

        string _FourthViewOnTile;

        /// <summary>
        /// Gets or sets the value of variable FourthViewOnTile.
        /// </summary>
        [TestVariable("083c1866-bb20-4d2b-b9b0-07a4493f7736")]
        public string FourthViewOnTile
        {
            get { return _FourthViewOnTile; }
            set { _FourthViewOnTile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Btn_LoggedName'", repo.ApplicationUnderTest.HomePage.Btn_LoggedNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.HomePage.Btn_LoggedNameInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$LoggedUsername) on item 'ApplicationUnderTest.HomePage.Btn_LoggedName'.", repo.ApplicationUnderTest.HomePage.Btn_LoggedNameInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.Btn_LoggedNameInfo, "InnerText", LoggedUsername);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Link_AddTile'", repo.ApplicationUnderTest.HomePage.Link_AddTileInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.HomePage.Link_AddTileInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            // ToVerify if the Added Tile Exists in the Home page along with the views
            Report.Log(ReportLevel.Info, "Section", "ToVerify if the Added Tile Exists in the Home page along with the views", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
            // To Verify the Value of View one on Tile with the existing one
            Report.Log(ReportLevel.Info, "Validation", "To Verify the Value of View one on Tile with the existing one\r\nValidating AttributeEqual (InnerText=$FirstViewNameOnTile) on item 'ApplicationUnderTest.HomePage.InnerText_FirstViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_FirstViewOnTileInfo, "InnerText", FirstViewNameOnTile);
            Delay.Milliseconds(0);
            
            // To Verify the Value of View two on Tile with the existing one
            Report.Log(ReportLevel.Info, "Validation", "To Verify the Value of View two on Tile with the existing one\r\nValidating AttributeEqual (InnerText=$SecondViewOnTile) on item 'ApplicationUnderTest.HomePage.InnerText_SecondViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_SecondViewOnTileInfo, "InnerText", SecondViewOnTile);
            Delay.Milliseconds(0);
            
            // To Verify the Value of View Three on Tile with the existing one
            Report.Log(ReportLevel.Info, "Validation", "To Verify the Value of View Three on Tile with the existing one\r\nValidating AttributeEqual (InnerText=$ThirdViewOnTile) on item 'ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_ThirdViewOnTileInfo, "InnerText", ThirdViewOnTile);
            Delay.Milliseconds(0);
            
            // To Verify the Value of View Four on Tile with the existing one
            Report.Log(ReportLevel.Info, "Validation", "To Verify the Value of View Four on Tile with the existing one\r\nValidating AttributeEqual (InnerText=$FourthViewOnTile) on item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, "InnerText", FourthViewOnTile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "Successfully Verified", new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(60000, "Visible", "True");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
