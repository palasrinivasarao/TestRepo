///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace GovPilot.GovPilotRecordings.SmokeRecordings.Homescreen
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyViewCountForFourthView recording.
    /// </summary>
    [TestModule("e2f954a0-8e8c-4003-847a-6cbd8df2fcd8", ModuleType.Recording, 1)]
    public partial class VerifyViewCountForFourthView : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::GovPilot.GovPilotRepository repository.
        /// </summary>
        public static global::GovPilot.GovPilotRepository repo = global::GovPilot.GovPilotRepository.Instance;

        static VerifyViewCountForFourthView instance = new VerifyViewCountForFourthView();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyViewCountForFourthView()
        {
            Breed = "";
            ViewName5 = "";
            ActualCountValue4 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyViewCountForFourthView Instance
        {
            get { return instance; }
        }

#region Variables

        string _Breed;

        /// <summary>
        /// Gets or sets the value of variable Breed.
        /// </summary>
        [TestVariable("5d799444-4ed1-4195-b33d-9ec517dc72a6")]
        public string Breed
        {
            get { return _Breed; }
            set { _Breed = value; }
        }

        string _ViewName5;

        /// <summary>
        /// Gets or sets the value of variable ViewName5.
        /// </summary>
        [TestVariable("0b1ebc76-e449-4422-a32e-ce5c1f66ec18")]
        public string ViewName5
        {
            get { return _ViewName5; }
            set { _ViewName5 = value; }
        }

        string _ActualCountValue4;

        /// <summary>
        /// Gets or sets the value of variable ActualCountValue4.
        /// </summary>
        [TestVariable("0c7e179f-b199-43a0-955f-988dbc14dfce")]
        public string ActualCountValue4
        {
            get { return _ActualCountValue4; }
            set { _ActualCountValue4 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.LnkModules'", repo.ApplicationUnderTest.HomePage.LnkModulesInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.HomePage.LnkModulesInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            // To Verify the Added Tile Exists
            //Report.Log(ReportLevel.Info, "Section", "To Verify the Added Tile Exists", new RecordItemIndex(1));
            
            //Report.Log(ReportLevel.Info, "User", "To Verify the Added Tile Exists", new RecordItemIndex(2));
            
            //HelperClass.ToVerifyAddedTile(ViewName5);
            //Delay.Milliseconds(0);
            
            // To Get the Actual Count Value on the Tile on the Home page
            Report.Log(ReportLevel.Info, "Section", "To Get the Actual Count Value on the Tile on the Home page", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "User", "To Fetch the count value from the Tile", new RecordItemIndex(5));
            
            ActualCountValue4 = HelperClass.ToFetchCountValueOnTile(ViewName5);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", "The Actual Count on the Tile is", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "User", ActualCountValue4, new RecordItemIndex(8));
            
            // The Fourth View on the Tile is Clicked
            Report.Log(ReportLevel.Info, "Section", "The Fourth View on the Tile is Clicked", new RecordItemIndex(9));
            
            // To Verify if the First View Exists on the Tile
            Report.Log(ReportLevel.Info, "Validation", "To Verify if the First View Exists on the Tile\r\nValidating AttributeEqual (InnerText=$ViewName5) on item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile'.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, "InnerText", ViewName5);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile' at Center.", repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTileInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.HomePage.InnerText_FourthViewOnTile.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_ViewName_All'", repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.DogLicensePage.Txt_ViewName_AllInfo.WaitForAttributeEqual(30000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Btn_Filter'", repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.DogLicensePage.Btn_FilterInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            HelperClass.ClickOnView(ViewName5);
            Delay.Milliseconds(0);
            
            // To Verify if the Filter Value of the Breed Column Contains the Value 'Mix'
            Report.Log(ReportLevel.Info, "Section", "To Verify if the Filter Value of the Breed Column Contains the Value 'Mix'", new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'ApplicationUnderTest.DogLicensePage.Txt_TagValue_Breed'.", repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_BreedInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_Breed.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.DogLicensePage.Txt_TagValue_Breed'", repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_BreedInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_BreedInfo.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Breed) on item 'ApplicationUnderTest.DogLicensePage.Txt_TagValue_Breed'.", repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_BreedInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Txt_TagValue_BreedInfo, "Value", Breed);
            Delay.Milliseconds(0);
            
            // To Verify if the Actual Count Value on the Tile Matched with the count Value represented in the Right Most Bottom of the Selected View
            Report.Log(ReportLevel.Info, "Section", "To Verify if the Actual Count Value on the Tile Matched with the count Value represented in the Right Most Bottom of the Selected View", new RecordItemIndex(19));
            
            Report.Log(ReportLevel.Info, "User", "To Verify if the Count Value On the right most bottom of the page matches with the Actual Tile Count", new RecordItemIndex(20));
            
            HelperClass.RetrieveAndVerifyExpectedCountValue(ActualCountValue4);
            Delay.Milliseconds(0);
            
            // To Validate if the Close view Button is visible
            Report.Log(ReportLevel.Info, "Validation", "To Validate if the Close view Button is visible\r\nValidating AttributeEqual (Visible='True') on item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview'.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.DogLicensePage.Btn_Closeview' at Center.", repo.ApplicationUnderTest.DogLicensePage.Btn_CloseviewInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.DogLicensePage.Btn_Closeview.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'ApplicationUnderTest.HomePage.Table_RecentRecords'", repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.HomePage.Table_RecentRecordsInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
